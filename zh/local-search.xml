<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在你的 C++/WinRT UWP 项目中使用 VC-LTL</title>
    <link href="/zh/2021/11/25/Use-VC-LTL-in-your-Cpp-WinRT-UWP-projects/"/>
    <url>/zh/2021/11/25/Use-VC-LTL-in-your-Cpp-WinRT-UWP-projects/</url>
    
    <content type="html"><![CDATA[<p>VC-LTL 是一套可以让开发者优雅的使用 Windows 内置的 C 运行时库的编译工具链，可使你编写的二进制在 C 运行库方面仅依赖 Windows 内置的 <code>msvcrt.dll</code> 或 <code>ucrtbase.dll</code>，以达成无需额外部署 MSVC 运行库、解决 FLS 上限问题和大大缩减二进制体积的目标。</p><p>作为 VC-LTL 的忠实用户，同时也希望让自己的 UWP 实现零额外依赖，于是试着在 UWP 项目中用了下 VC-LTL并意外的做成了这件事，遂写一篇文章记录下来供人参考。</p><h2 id="添加-VC-LTL-到你的-UWP-项目"><a href="#添加-VC-LTL-到你的-UWP-项目" class="headerlink" title="添加 VC-LTL 到你的 UWP 项目"></a>添加 VC-LTL 到你的 UWP 项目</h2><p>由于现在 VC-LTL 也发布 NuGet 包，于是只需要在 Visual Studio 中项目右键的管理 NuGet 程序包中搜索 VC-LTL 安装即可。</p><p>注：VC-LTL 的版本需要选择 5.0 之后的版本。</p><h2 id="魔改-UWP-项目配置"><a href="#魔改-UWP-项目配置" class="headerlink" title="魔改 UWP 项目配置"></a>魔改 UWP 项目配置</h2><p>由于 UWP 项目默认不支持与 C 运行库静态链接且默认生成的应用清单会包含 VCLibs 的依赖，于是咱们需要做一些魔改。</p><p>首先我们需要在 Visual Studio 中把项目的所有配置的所有平台的编译器属性页的附加依赖项添加 <code>kernel32.lib</code>, <code>ole32.lib</code> 和<code>oleaut32.lib</code>，之后使用 Visual Studio 之外的你用得顺手的编辑器打开我们需要魔改的 UWP 项目对应的 <code>.vcxproj</code> 配置文件，找到 <code>PropertyGroup Label=&quot;Globals&quot;</code> 节点添加 <code>&lt;_VC_Target_Library_Platform&gt;Desktop&lt;/_VC_Target_Library_Platform&gt;</code>以让 MSBuild C++ 编译工具链以桌面应用的方式处理以解决 UWP 项目默认不支持与 C 运行库静态链接的问题。</p><p>然后在我们需要魔改的 UWP 项目对应的 <code>.vcxproj</code> 配置文件中找到 <code>PropertyGroup Label=&quot;Globals&quot;</code> 节点添加<code>&lt;UseCrtSDKReference&gt;false&lt;/UseCrtSDKReference&gt;</code> 和在 <code>Project</code> 节点的末尾添加以下内容以解决默认生成的应用清单会包含VCLibs 的依赖的问题。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- ## BEGIN HACK - Removing Microsoft.VCLibs Packages ## --&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  Reference: https://github.com/microsoft/terminal</span><br><span class="hljs-comment">             /blob/a89c3e2f8527a51b39768980627ed8f7c1ea5f0b</span><br><span class="hljs-comment">             /src/cascadia/CascadiaPackage/CascadiaPackage.wapproj#L125</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">  For our builds, we&#x27;re just using VC-LTL to compile the project and delete</span><br><span class="hljs-comment">  the package dependencies. We don&#x27;t want to rely on the Microsoft.VCLibs </span><br><span class="hljs-comment">  packages. Because it&#x27;s very difficult for users who do not have access to </span><br><span class="hljs-comment">  the store to get our dependency packages, and we want to be robust and </span><br><span class="hljs-comment">  deployable everywhere.</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  This target removes the FrameworkSdkReferences from before the AppX package</span><br><span class="hljs-comment">  targets manifest generation happens. This is part of the generic machinery </span><br><span class="hljs-comment">  that applies to every AppX. </span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Target</span> <span class="hljs-attr">Name</span>=<span class="hljs-string">&quot;_StripAllDependenciesFromPackageFirstManifest&quot;</span> <span class="hljs-attr">BeforeTargets</span>=<span class="hljs-string">&quot;_GenerateCurrentProjectAppxManifest&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ItemGroup</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">FrameworkSdkReference</span> <span class="hljs-attr">Remove</span>=<span class="hljs-string">&quot;@(FrameworkSdkReference)&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ItemGroup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Target</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">  This target removes the FrameworkSdkPackages from before the *desktop </span><br><span class="hljs-comment">  bridge* manifest generation happens. </span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Target</span> <span class="hljs-attr">Name</span>=<span class="hljs-string">&quot;_StripAllDependenciesFromPackageSecondManifest&quot;</span> <span class="hljs-attr">BeforeTargets</span>=<span class="hljs-string">&quot;_GenerateDesktopBridgeAppxManifest&quot;</span> <span class="hljs-attr">DependsOnTargets</span>=<span class="hljs-string">&quot;_ResolveVCLibDependencies&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ItemGroup</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">FrameworkSdkPackage</span> <span class="hljs-attr">Remove</span>=<span class="hljs-string">&quot;@(FrameworkSdkPackage)&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ItemGroup</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Target</span>&gt;</span><br><span class="hljs-comment">&lt;!-- ## END HACK - Removing Microsoft.VCLibs Packages ## --&gt;</span><br></code></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>上述方法的诞生离不开 Windows Terminal 源代码的实现，对于有志于开发现代 Windows 应用的朋友，Windows Terminal 的源代码真的是一个取之不尽用之不竭的大宝藏，里面涉及到很多的魔改技巧，也有开发团队对现代 Windows 应用开发工具链的无奈和吐槽。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://github.com/Chuyu-Team/VC-LTL5">VC-LTL 5.x 项目地址</a></li><li><a href="https://github.com/microsoft/terminal">Windows Terminal 源代码仓库</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>开发环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 VC-LTL 构建 Qt 6</title>
    <link href="/zh/2021/11/23/Build-Qt-6-with-VC-LTL/"/>
    <url>/zh/2021/11/23/Build-Qt-6-with-VC-LTL/</url>
    
    <content type="html"><![CDATA[<p>上个礼拜和友人 <a href="https://github.com/wangwenx190">wangwenx190</a> 请教如何在使用 VC-LTL 工具链的情况下编译 Qt 6 源代码，然后进行了数个小时的讨论，虽然有很大的进展，但是 Qt 6 的 configure.bat 的 –debug-and-release 模式不能用，我由于不怎么用CMake 于是束手无策，几天后友人给 VC-LTL 捣鼓了个 PR 解决了这个问题，遂笔者将相关做法整理成本文。</p><p>本文假设你已经配置好了编译 Qt 6 源代码的基本环境，毕竟本文主要目的是介绍如何在编译 Qt 6 源代码的时候使用 VC-LTL 来使你编译的 Qt 6 的二进制在 C 运行库方面仅依赖 Windows 内置的 <code>msvcrt.dll</code> 或 <code>ucrtbase.dll</code> 以达成无需额外部署MSVC 运行库的目标。</p><p>首先你需要去 <a href="https://github.com/Chuyu-Team/VC-LTL5/releases">https://github.com/Chuyu-Team/VC-LTL5/releases</a> 下载最新版本的 VC-LTL 二进制包 (譬如撰写本文的时候最新版本VC-LTL 的二进制包文件名为 <code>VC-LTL-5.0.3-Beta1-Binary.7z</code>) 并解压到最好路径只有英文字符的目录 (本文的例子是 <code>C:\Tools\VC-LTL</code>) ，并执行解压目录内的 <code>Install.cmd</code> 将 VC-LTL 的工具链目录注册入系统。</p><p>然后根据 <a href="https://github.com/Chuyu-Team/VC-LTL5/pull/14">wangwenx190 给 VC-LTL 捣鼓的 PR</a> 对 VC-LTL 工具链目录的 <code>config/config.cmake</code> 进行相应修改，即查找该文件中的第 19 行，如果发现下述内容后直接去掉并保存即可。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$&#123;SupportLTL&#125;</span> <span class="hljs-keyword">STREQUAL</span> <span class="hljs-string">&quot;true&quot;</span>)<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">NOT</span> CMAKE_BUILD_TYPE)<br><span class="hljs-keyword">message</span>(WARNING <span class="hljs-string">&quot;VC-LTL not load, because CMAKE_BUILD_TYPE is not defined!!!&quot;</span>)<br><span class="hljs-keyword">set</span>(SupportLTL <span class="hljs-string">&quot;false&quot;</span>)<br><span class="hljs-keyword">endif</span>()<br><span class="hljs-keyword">endif</span>()<br></code></pre></td></tr></table></figure><p>接着将 VC-LTL 工具链目录的 <code>VC-LTL helper for cmake.cmake</code> 文件拷贝到 Qt 源代码目录的 <code>qtbase/cmake/</code> 子目录下并重命名为<code>VC-LTL.cmake</code>，并在 <code>qtbase/cmake/QtBuild.cmake</code> 的末尾添加下述内容并保存。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs swift">include(<span class="hljs-type">VC</span><span class="hljs-operator">-</span><span class="hljs-type">LTL</span>)<br><br><span class="hljs-keyword">set</span>(<span class="hljs-type">CompilerFlags</span><br><span class="hljs-type">CMAKE_CXX_FLAGS</span><br><span class="hljs-type">CMAKE_CXX_FLAGS_DEBUG</span><br><span class="hljs-type">CMAKE_CXX_FLAGS_RELEASE</span><br><span class="hljs-type">CMAKE_CXX_FLAGS_MINSIZEREL</span><br><span class="hljs-type">CMAKE_CXX_FLAGS_RELWITHDEBINFO</span><br><span class="hljs-type">CMAKE_C_FLAGS</span><br><span class="hljs-type">CMAKE_C_FLAGS_DEBUG</span><br><span class="hljs-type">CMAKE_C_FLAGS_RELEASE</span><br><span class="hljs-type">CMAKE_C_FLAGS_MINSIZEREL</span><br><span class="hljs-type">CMAKE_C_FLAGS_RELWITHDEBINFO</span>)<br>foreach(<span class="hljs-type">CompilerFlag</span> $&#123;<span class="hljs-type">CompilerFlags</span>&#125;)<br>string(<span class="hljs-type">REPLACE</span> <span class="hljs-string">&quot;/MD&quot;</span> <span class="hljs-string">&quot;/MT&quot;</span> $&#123;<span class="hljs-type">CompilerFlag</span>&#125; <span class="hljs-string">&quot;$&#123;$&#123;CompilerFlag&#125;&#125;&quot;</span>)<br>    string(<span class="hljs-type">REPLACE</span> <span class="hljs-string">&quot;/MDd&quot;</span> <span class="hljs-string">&quot;/MTd&quot;</span> $&#123;<span class="hljs-type">CompilerFlag</span>&#125; <span class="hljs-string">&quot;$&#123;$&#123;CompilerFlag&#125;&#125;&quot;</span>)<br>endforeach()<br></code></pre></td></tr></table></figure><p>然后你就可以按照 Qt 6 官方的编译教程去编译使用了 VC-LTL 工具链的 Qt 6 二进制了，顺便附上我的 Qt 6 编译命令。</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-string">&quot;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat&quot;</span> amd64<br><span class="hljs-meta">set</span> PATH=%~dp0qtbase\bin;<span class="hljs-name">%PATH</span>%<br>mkdir <span class="hljs-meta">output</span>\x64<br>cd <span class="hljs-meta">output</span>\x64<br><span class="hljs-meta">call</span> ..\..\configure.bat -prefix <span class="hljs-string">&quot;C:\Workspace\Qt\6.2.1\msvc2019_64&quot;</span> -debug-<span class="hljs-meta">and</span>-release -platform win32-msvc -opensource -confirm-license -shared -nomake examples -nomake tests -no-openssl -no-opengl -plugin-sql-sqlite -qt-zlib -qt-libpng -qt-libjpeg -mp -<span class="hljs-meta">skip</span> qt3d -<span class="hljs-meta">skip</span> qt5compat -<span class="hljs-meta">skip</span> qtcharts -<span class="hljs-meta">skip</span> qtcoap -<span class="hljs-meta">skip</span> qtconnectivity -<span class="hljs-meta">skip</span> qtdatavis3d -<span class="hljs-meta">skip</span> qtdeclarative -<span class="hljs-meta">skip</span> qtdoc -<span class="hljs-meta">skip</span> qtlocation -<span class="hljs-meta">skip</span> qtlottie -<span class="hljs-meta">skip</span> qtmqtt -<span class="hljs-meta">skip</span> qtmultimedia -<span class="hljs-meta">skip</span> qtnetworkauth -<span class="hljs-meta">skip</span> qtopcua -<span class="hljs-meta">skip</span> qtquick3d -<span class="hljs-meta">skip</span> qtquicktimeline -<span class="hljs-meta">skip</span> qtremoteobjects -<span class="hljs-meta">skip</span> qtscxml -<span class="hljs-meta">skip</span> qtsensors -<span class="hljs-meta">skip</span> qtserialbus -<span class="hljs-meta">skip</span> qtserialport -<span class="hljs-meta">skip</span> qtshadertools -<span class="hljs-meta">skip</span> qtvirtualkeyboard -<span class="hljs-meta">skip</span> qtwebchannel -<span class="hljs-meta">skip</span> qtwebengine -<span class="hljs-meta">skip</span> qtwebsockets -<span class="hljs-meta">skip</span> qtwebview<br>ninja<br>ninja install<br></code></pre></td></tr></table></figure><p>希望大家把玩 Qt 6 的时候能够顺利一些，感谢阅读。</p><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>开发环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 10 Build 1904x ISO 中存在的问题和解决方案</title>
    <link href="/zh/2021/11/17/Some-noticeable-issues-in-Windows-10-Build-1904x-ISOs/"/>
    <url>/zh/2021/11/17/Some-noticeable-issues-in-Windows-10-Build-1904x-ISOs/</url>
    
    <content type="html"><![CDATA[<p>在 Windows 10 Build 19041 的官方 ISO 正式发布以后，我在远景写了一篇帖子来叙述微软在进行系统打包时出现的纰漏。然而直到最新的 Windows 10, Version 21H2 即 Windows 10 Build 19044 该纰漏一直存在，看起来微软无暇关注 Windows 10 了，毕竟 Windows 11 发布而其官方版本 ISO 并不存在这样的纰漏。</p><p>为了能够让更多的人注意到相关纰漏，于是我将相关内容梳理到本文以供参考。</p><h2 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h2><ul><li><code>&#123;ISO 根目录&#125;\source\boot.wim</code> 在集成累积更新后并没有重新生成 WIM 镜像，于是在该镜像中存在旧版文件的残留，大概会导致 200MB 的体积增加。Windows 10 Enterprise LTSC 2021 官方 ISO 的 <code>boot.wim</code> 文件体积高达 700MB。</li><li><code>&#123;ISO 根目录&#125;\source\install.wim</code> 虽然在集成累积更新后重新生成了 WIM 镜像，但是其中的 Windows RE 映像即 <code>winre.wim</code>只集成了组件堆栈补丁没有集成累积更新，于是 Windows RE 的版本依然是 19041.1。</li></ul><h2 id="潜在影响"><a href="#潜在影响" class="headerlink" title="潜在影响"></a>潜在影响</h2><ul><li>因为 <code>boot.wim</code> 体积增加，在内存捉襟见肘的某些 32 位计算机很可能无法正常引导到安装程序。</li><li>因为 <code>winre.wim</code> 没有集成累积更新，用户可能依旧遭遇着一些已经修复的恢复环境下的问题。</li><li>强迫症患者和完美主义者会对此表示很不爽。</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>本段以 Windows 10 Enterprise LTSC 2021 64 位官方 ISO 为例，且假定你有一台安装了 7-Zip 和 UltraISO 的 Windows 10 的计算机。</p><h3 id="下载累积更新"><a href="#下载累积更新" class="headerlink" title="下载累积更新"></a>下载累积更新</h3><p>由于 Windows 10 Enterprise LTSC 2021 的版本号为 10.0.19041.1288，从 Windows 10 更新历史记录页面可得知对应的累积更新为KB5006670，去 Microsoft 更新目录网站可得知 KB5006670 的直链为：</p><ul><li>x86<a href="http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/10/windows10.0-kb5006670-x86_6666ab09e61dc4f2f76bb3efc1a3c3631c2fb627.msu">http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/10/windows10.0-kb5006670-x86_6666ab09e61dc4f2f76bb3efc1a3c3631c2fb627.msu</a></li><li>x64<a href="http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/10/windows10.0-kb5006670-x64_51b78c3627885149a65b09dc92a936935017ff58.msu">http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/10/windows10.0-kb5006670-x64_51b78c3627885149a65b09dc92a936935017ff58.msu</a></li><li>ARM64<a href="http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/10/windows10.0-kb5006670-arm64_c91c87a424499a4051b66026ed73bb4dda7bc9d7.msu">http://download.windowsupdate.com/c/msdownload/update/software/secu/2021/10/windows10.0-kb5006670-arm64_c91c87a424499a4051b66026ed73bb4dda7bc9d7.msu</a></li></ul><p>使用浏览器或者第三方工具将文件下载并保持原来的文件名即可。</p><h3 id="准备工作目录"><a href="#准备工作目录" class="headerlink" title="准备工作目录"></a>准备工作目录</h3><p>首先我们需要创建一个工作目录，以 <code>C:\Win10Image</code> 为例；在该文件夹中放入你下载的官方 ISO 和累积更新且创建 <code>Mount</code> 和<code>MountRE</code> 目录，效果如图。</p><p><img src="WorkspaceImage.png" alt="准备工作目录"></p><h3 id="提取必需文件"><a href="#提取必需文件" class="headerlink" title="提取必需文件"></a>提取必需文件</h3><p>使用 7-Zip 从你下载的官方 ISO 中，将 ISO 中 <code>Source</code> 目录下的 <code>boot.wim</code> 和 <code>install.wim</code> 提取到工作目录，如图所示。</p><p><img src="ExtractFiles.png" alt="提取必需文件"></p><h3 id="命令行环境准备"><a href="#命令行环境准备" class="headerlink" title="命令行环境准备"></a>命令行环境准备</h3><p>以管理员身份运行命令提示符，并输入下述命令切换到工作目录。</p><blockquote><p>cd /d C:\Win10Image</p></blockquote><p>命令行输出结果如下。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\s</span>ystem32&gt;cd /d C:<span class="hljs-symbol">\W</span>in10Image<br><br>C:<span class="hljs-symbol">\W</span>in10Image&gt;<br></code></pre></td></tr></table></figure><h3 id="重新生成-boot-wim"><a href="#重新生成-boot-wim" class="headerlink" title="重新生成 boot.wim"></a>重新生成 <code>boot.wim</code></h3><p>在准备好的命令环境中输入下述命令即可。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">DISM <span class="hljs-regexp">/Export-Image /</span>SourceImageFile:boot.wim <span class="hljs-regexp">/SourceIndex:1 /</span>DestinationImageFile:boot.<span class="hljs-keyword">new</span>.wim<br>DISM <span class="hljs-regexp">/Export-Image /</span>SourceImageFile:boot.wim <span class="hljs-regexp">/SourceIndex:2 /</span>Bootable /DestinationImageFile:boot.<span class="hljs-keyword">new</span>.wim<br>del boot.wim<br>rename boot.<span class="hljs-keyword">new</span>.wim boot.wim<br></code></pre></td></tr></table></figure><p>命令行输出结果如下。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stylus">C:\Win10Image&gt;DISM /Export-Image /SourceImageFile:boot<span class="hljs-selector-class">.wim</span> /SourceIndex:<span class="hljs-number">1</span> /DestinationImageFile:boot<span class="hljs-selector-class">.new</span><span class="hljs-selector-class">.wim</span><br><br>部署映像服务和管理工具<br>版本: <span class="hljs-number">10.0</span>.<span class="hljs-number">17763.1697</span><br><br>正在导出映像<br><span class="hljs-selector-attr">[==========================100.0%==========================]</span><br>操作成功完成。<br><br>C:\Win10Image&gt;DISM /Export-Image /SourceImageFile:boot<span class="hljs-selector-class">.wim</span> /SourceIndex:<span class="hljs-number">2</span> /Bootable /DestinationImageFile:boot<span class="hljs-selector-class">.new</span><span class="hljs-selector-class">.wim</span><br><br>部署映像服务和管理工具<br>版本: <span class="hljs-number">10.0</span>.<span class="hljs-number">17763.1697</span><br><br>正在导出映像<br><span class="hljs-selector-attr">[==========================100.0%==========================]</span><br>操作成功完成。<br><br>C:\Win10Image&gt;<span class="hljs-selector-tag">del</span> boot<span class="hljs-selector-class">.wim</span><br><br>C:\Win10Image&gt;rename boot<span class="hljs-selector-class">.new</span><span class="hljs-selector-class">.wim</span> boot<span class="hljs-selector-class">.wim</span><br><br>C:\Win10Image&gt;<br></code></pre></td></tr></table></figure><h3 id="挂载-install-wim"><a href="#挂载-install-wim" class="headerlink" title="挂载 install.wim"></a>挂载 <code>install.wim</code></h3><p>由于 Windows 10 Enterprise LTSC 2021 的 <code>install.wim</code> 只有一个 Index，于是在准备好的命令环境中输入下述命令即可。</p><blockquote><p>DISM /Mount-Wim /WimFile:install.wim /Index:1 /MountDir:Mount</p></blockquote><p>命令行输出结果如下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">C:\Win10Image&gt;DISM <span class="hljs-regexp">/Mount-Wim /</span>WimFile:install.wim <span class="hljs-regexp">/Index:1 /</span>MountDir:Mount<br><br>部署映像服务和管理工具<br>版本: <span class="hljs-number">10.0</span>.<span class="hljs-number">17763.1697</span><br><br>正在安装映像<br>[==========================<span class="hljs-number">100.0</span>%==========================]<br>操作成功完成。<br><br>C:\Win10Image&gt;<br></code></pre></td></tr></table></figure><h3 id="挂载-install-wim-内的-winre-wim"><a href="#挂载-install-wim-内的-winre-wim" class="headerlink" title="挂载 install.wim 内的 winre.wim"></a>挂载 <code>install.wim</code> 内的 <code>winre.wim</code></h3><p>一般来说未经过 OOBE 阶段的 Windows RE 映像存放位置在 <code>Mount\Windows\System32\Recovery\Winre.wim</code>.</p><p>由于 Windows 10 Enterprise LTSC 2021 的 <code>winre.wim</code> 只有一个 Index，于是在准备好的命令环境中输入下述命令即可。</p><blockquote><p>DISM /Mount-Wim /WimFile:Mount\Windows\System32\Recovery\Winre.wim /Index:1 /MountDir:MountRE</p></blockquote><p>命令行输出结果如下。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\W</span>in10Image&gt;DISM /Mount-Wim /WimFile:Mount<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\R</span>ecovery<span class="hljs-symbol">\W</span>inre.wim /Index:1 /MountDir:MountRE<br><br>部署映像服务和管理工具<br>版本: 10.0.17763.1697<br><br>正在安装映像<br>[==========================100.0<span class="hljs-variable">%==========================]</span><br><span class="hljs-variable">操作成功完成。</span><br><span class="hljs-variable"></span><br><span class="hljs-variable">C:\Win10Image&gt;</span><br></code></pre></td></tr></table></figure><h3 id="为-winre-wim-集成-KB5006670"><a href="#为-winre-wim-集成-KB5006670" class="headerlink" title="为 winre.wim 集成 KB5006670"></a>为 <code>winre.wim</code> 集成 KB5006670</h3><p>在准备好的命令环境中输入下述命令即可。</p><blockquote><p>DISM /Image:MountRE /Add-Package /PackagePath:windows10.0-kb5006670-x64_51b78c3627885149a65b09dc92a936935017ff58.msu</p></blockquote><p>命令行输出结果如下。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">Win10Image</span><span class="hljs-operator">&gt;</span><span class="hljs-variable">DISM</span> <span class="hljs-operator">/</span><span class="hljs-built_in">Image</span><span class="hljs-operator">:</span><span class="hljs-variable">MountRE</span> <span class="hljs-operator">/</span><span class="hljs-variable">Add</span><span class="hljs-operator">-</span><span class="hljs-built_in">Package</span> <span class="hljs-operator">/</span><span class="hljs-variable">PackagePath</span><span class="hljs-operator">:</span><span class="hljs-variable">windows10</span><span class="hljs-number">.0</span><span class="hljs-operator">-</span><span class="hljs-variable">kb5006670</span><span class="hljs-operator">-</span><span class="hljs-type">x64_</span><span class="hljs-number">51</span><span class="hljs-variable">b78c3627885149a65b09dc92a936935017ff58</span><span class="hljs-operator">.</span><span class="hljs-variable">msu</span><br><br>部署映像服务和管理工具<br>版本<span class="hljs-operator">:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.17763</span><span class="hljs-number">.1697</span><br><br>映像版本<span class="hljs-operator">:</span> <span class="hljs-number">10.0</span><span class="hljs-number">.19041</span><span class="hljs-number">.1</span><br><br><span class="hljs-variable">Processing</span> <span class="hljs-number">1</span> <span class="hljs-variable">of</span> <span class="hljs-number">1</span> <span class="hljs-operator">-</span> <span class="hljs-variable">Adding</span> <span class="hljs-variable">package</span> <span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">Win10Image</span>\<span class="hljs-variable">windows10</span><span class="hljs-number">.0</span><span class="hljs-operator">-</span><span class="hljs-variable">kb5006670</span><span class="hljs-operator">-</span><span class="hljs-type">x64_</span><span class="hljs-number">51</span><span class="hljs-variable">b78c3627885149a65b09dc92a936935017ff58</span><span class="hljs-operator">.</span><span class="hljs-variable">msu</span><br><span class="hljs-punctuation">[</span><span class="hljs-operator">==========================</span><span class="hljs-number">100.0</span><span class="hljs-operator">%==========================</span><span class="hljs-punctuation">]</span><br>操作成功完成。<br><br><span class="hljs-built_in">C</span><span class="hljs-operator">:</span>\<span class="hljs-variable">Win10Image</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h3 id="保存结果并重新生成-winre-wim"><a href="#保存结果并重新生成-winre-wim" class="headerlink" title="保存结果并重新生成 winre.wim"></a>保存结果并重新生成 <code>winre.wim</code></h3><p>在准备好的命令环境中输入下述命令即可。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">DISM /Unmount-Image /MountDir:MountRE /Commit<br>DISM /Export-Image /SourceImageFile:Mount<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\R</span>ecovery<span class="hljs-symbol">\W</span>inre.wim /SourceIndex:1 /Bootable /DestinationImageFile:Mount<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\R</span>ecovery<span class="hljs-symbol">\W</span>inre.new.wim<br>del Mount<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\R</span>ecovery<span class="hljs-symbol">\W</span>inre.wim<br>rename Mount<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\R</span>ecovery<span class="hljs-symbol">\W</span>inre.new.wim Winre.wim<br></code></pre></td></tr></table></figure><p>命令行输出结果如下。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">C:\Win10Image&gt;DISM /Unmount-Image /MountDir:MountRE /Commit<br><br>部署映像服务和管理工具<br>版本: <span class="hljs-number">10.0</span>.<span class="hljs-number">17763.1697</span><br><br>正在保存映像<br><span class="hljs-literal">[<span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-number">100.0</span>%<span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span>]</span><br>正在卸载映像<br><span class="hljs-literal">[<span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-number">100.0</span>%<span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span>]</span><br>操作成功完成。<br><br>C:\Win10Image&gt;DISM /Export-Image /SourceImageFile:Mount\Windows\System32\Recovery\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Winre</span>.</span></span>wim /SourceIndex:<span class="hljs-number">1</span> /Bootable /DestinationImageFile:Mount\Windows\System32\Recovery\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Winre</span>.</span></span><span class="hljs-keyword">new</span>.wim<br><br>部署映像服务和管理工具<br>版本: <span class="hljs-number">10.0</span>.<span class="hljs-number">17763.1697</span><br><br>正在导出映像<br><span class="hljs-literal">[<span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-number">100.0</span>%<span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span><span class="hljs-operator">==</span>]</span><br>操作成功完成。<br><br>C:\Win10Image&gt;del Mount\Windows\System32\Recovery\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Winre</span>.</span></span>wim<br><br>C:\Win10Image&gt;rename Mount\Windows\System32\Recovery\<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Winre</span>.</span></span><span class="hljs-keyword">new</span>.wim <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Winre</span>.</span></span>wim<br><br>C:\Win10Image&gt;<br></code></pre></td></tr></table></figure><h3 id="保存结果并重新生成-install-wim"><a href="#保存结果并重新生成-install-wim" class="headerlink" title="保存结果并重新生成 install.wim"></a>保存结果并重新生成 <code>install.wim</code></h3><p>在准备好的命令环境中输入下述命令即可。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">DISM <span class="hljs-regexp">/Unmount-Image /M</span>ountDir:Mount /Commit<br>DISM <span class="hljs-regexp">/Export-Image /</span>SourceImageFile:install.wim <span class="hljs-regexp">/SourceIndex:1 /</span>DestinationImageFile:install.<span class="hljs-keyword">new</span>.wim<br>del install.wim<br>rename install.<span class="hljs-keyword">new</span>.wim install.wim<br></code></pre></td></tr></table></figure><p>命令行输出结果如下。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs stylus">C:\Win10Image&gt;DISM /Unmount-Image /MountDir:Mount /Commit<br><br>部署映像服务和管理工具<br>版本: <span class="hljs-number">10.0</span>.<span class="hljs-number">17763.1697</span><br><br>正在保存映像<br><span class="hljs-selector-attr">[==========================100.0%==========================]</span><br>正在卸载映像<br><span class="hljs-selector-attr">[==========================100.0%==========================]</span><br>操作成功完成。<br><br>C:\Win10Image&gt;DISM /Export-Image /SourceImageFile:install<span class="hljs-selector-class">.wim</span> /SourceIndex:<span class="hljs-number">1</span> /DestinationImageFile:install<span class="hljs-selector-class">.new</span><span class="hljs-selector-class">.wim</span><br><br>部署映像服务和管理工具<br>版本: <span class="hljs-number">10.0</span>.<span class="hljs-number">17763.1697</span><br><br>正在导出映像<br><span class="hljs-selector-attr">[==========================100.0%==========================]</span><br>操作成功完成。<br><br>C:\Win10Image&gt;<span class="hljs-selector-tag">del</span> install<span class="hljs-selector-class">.wim</span><br><br>C:\Win10Image&gt;rename install<span class="hljs-selector-class">.new</span><span class="hljs-selector-class">.wim</span> install<span class="hljs-selector-class">.wim</span><br><br>C:\Win10Image&gt;<br></code></pre></td></tr></table></figure><h3 id="生成修改后的-ISO"><a href="#生成修改后的-ISO" class="headerlink" title="生成修改后的 ISO"></a>生成修改后的 ISO</h3><p>使用 UltraISO 或类似工具将原 ISO 的 <code>Source</code> 目录下 <code>boot.wim</code> 和 <code>install.wim</code> 替换并另存为你想要保存的文件即可。</p><p><img src="ReplaceFiles.png" alt="替换对应文件"></p><h2 id="示例映像"><a href="#示例映像" class="headerlink" title="示例映像"></a>示例映像</h2><h3 id="zh-cn-windows-10-enterprise-ltsc-2021-x64-dvd-033b7312-mouri-repacked-iso"><a href="#zh-cn-windows-10-enterprise-ltsc-2021-x64-dvd-033b7312-mouri-repacked-iso" class="headerlink" title="zh-cn_windows_10_enterprise_ltsc_2021_x64_dvd_033b7312_mouri_repacked.iso"></a>zh-cn_windows_10_enterprise_ltsc_2021_x64_dvd_033b7312_mouri_repacked.iso</h3><ul><li>SHA256: 62193E23BCC2D66A60807965B8CEB7C01887E7336A5C10B2D436432B2FE9C4BE</li><li>直链<ul><li>链接：<a href="https://d.legna.cn/MouriRepackedOS/LTSC2021/zh-cn_windows_10_enterprise_ltsc_2021_x64_dvd_033b7312_mouri_repacked.iso">https://d.legna.cn/MouriRepackedOS/LTSC2021/zh-cn_windows_10_enterprise_ltsc_2021_x64_dvd_033b7312_mouri_repacked.iso</a></li><li>直链服务器由 Legna 赞助</li></ul></li><li>百度网盘<ul><li>链接：<a href="https://pan.baidu.com/s/1eo8KOAe9p1Uoca5tRsB6Kg">https://pan.baidu.com/s/1eo8KOAe9p1Uoca5tRsB6Kg</a></li><li>提取码：p2qe</li></ul></li><li>临时网盘 (由 subaobao_ok 提供)<ul><li>链接：<a href="https://pan.adycloud.com/s/mZeun">https://pan.adycloud.com/s/mZeun</a></li><li>密码：bbs.pcbeta.com</li></ul></li><li>天翼云盘 (由 subaobao_ok 提供)<ul><li>链接：<a href="https://cloud.189.cn/t/eq2mQnV3qIfa">https://cloud.189.cn/t/eq2mQnV3qIfa</a> </li><li>访问码:9tov</li></ul></li></ul><h3 id="zh-cn-windows-10-enterprise-ltsc-2021-x86-dvd-30600d9c-mouri-repacked-iso"><a href="#zh-cn-windows-10-enterprise-ltsc-2021-x86-dvd-30600d9c-mouri-repacked-iso" class="headerlink" title="zh-cn_windows_10_enterprise_ltsc_2021_x86_dvd_30600d9c_mouri_repacked.iso"></a>zh-cn_windows_10_enterprise_ltsc_2021_x86_dvd_30600d9c_mouri_repacked.iso</h3><ul><li>SHA256: 239278A14ED0975AE99199352CDC1F54615D19A7DC8B7D753645A44B57A388EE</li><li>直链<ul><li>链接：<a href="https://d.legna.cn/MouriRepackedOS/LTSC2021/zh-cn_windows_10_enterprise_ltsc_2021_x86_dvd_30600d9c_mouri_repacked.iso">https://d.legna.cn/MouriRepackedOS/LTSC2021/zh-cn_windows_10_enterprise_ltsc_2021_x86_dvd_30600d9c_mouri_repacked.iso</a></li><li>直链服务器由 Legna 赞助</li></ul></li><li>百度网盘<ul><li>链接：<a href="https://pan.baidu.com/s/1eo8KOAe9p1Uoca5tRsB6Kg">https://pan.baidu.com/s/1eo8KOAe9p1Uoca5tRsB6Kg</a></li><li>提取码：p2qe</li></ul></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://bbs.pcbeta.com/viewthread-1858942-1-1.html">Windows 10 Version 2004 MSDN ISO 已知问题汇总</a></li><li><a href="https://support.microsoft.com/zh-cn/topic/1b6aac92-bf01-42b5-b158-f80c6d93eb11">Windows 10 更新历史记录</a></li><li><a href="https://www.catalog.update.microsoft.com/">Microsoft 更新目录</a></li><li><a href="https://bbs.pcbeta.com/viewthread-1912202-1-1.html">【毛利重打包版（x86 和 x64）】Windows 10 Enterprise LTSC 2021【含天翼云分流】</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>开发环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>仅在管理员权限下绕过文件和注册表访问检查</title>
    <link href="/zh/2021/11/14/Bypass-file-and-registry-access-check-only-with-Administrator/"/>
    <url>/zh/2021/11/14/Bypass-file-and-registry-access-check-only-with-Administrator/</url>
    
    <content type="html"><![CDATA[<p>我相信读者看到这个标题会很兴奋，因为本文会提供一种方式使得开发者仅在管理员权限下就能绕过文件和注册表访问检查，以顺利地修改原本需要 SYSTEM 令牌甚至 TrustedInstaller 令牌下才能访问的内容。本文会对此进行简要的描述。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>使用开源的 Microsoft Detours 库对 Windows NT 内核的文件和注册表相关的系统调用进行 Inline Hook 以传入启用利用SeBackupPrivilege 和 SeRestorePrivilege 特权的选项让开发者基本不用修改自己的实现也能充分的利用管理员权限所提供的特权。</p><p>需要进行 Inline Hook 的系统调用如下。</p><ul><li>NtCreateKey</li><li>NtCreateKeyTransacted</li><li>NtOpenKey</li><li>NtOpenKeyTransacted</li><li>NtOpenKeyEx</li><li>NtOpenKeyTransactedEx</li><li>NtCreateFile</li><li>NtOpenFile</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>启用 SeBackupPrivilege 和 SeRestorePrivilege 是前提条件, 但是你也需要在创建文件或注册表句柄的时候传入对应的选项, 否则是不生效的。</p><p>首先说明一点, 那就是 Windows 内核当发现调用者上下文为 SYSTEM 令牌的时候, 据 Microsoft 文档描述是为了提升 Windows 的性能会自动忽略掉大部分访问检查, 毕竟很多 Windows 系统关键组件运行在 SYSTEM 令牌上下文下面, 对于 Windows 用户模式而言, SYSTEM 令牌是至高无上的, 所以访问检查没必要做, 做了也提升不了安全性反而降低了效率。所以这也是为什么除了 SYSTEM 令牌上下文外的其他令牌都需要启用相关特权 + 创建文件和注册表句柄的 API 传入对应选项才能忽略掉相关访问检查。</p><p>我用一个最简单的例子来说明减少不需要的内核级访问检查的好处, 那就是在 Windows AppContainer 下运行的代码, 由于会多出一个额外的内核级访问检查 (用 IDA 分析 ntoskrnl.exe, 然后用 F5 查看相关函数可以发现, 其实就是多出了一个分支和寥寥数行实现), 大概会比在 AppContainer 外运行会损失 15% 的性能(这也可以说明越底层的实现越需要重视性能问题)。Windows AppContainer 是 Windows 8 开始提供的用户模式沙盒, 主要用在商店应用和浏览器的沙盒上面。</p><p>Windows 的大部分内部使用了创建文件和注册表句柄的 API 并没有传入对应的选项, 于是就出现了普通管理员下即使开启了这两个特权有些目录照样还是无法进行增删查改。而通过 Inline Hook 对 Windows 用户模式的系统调用层进行挂钩以智能传入相关选项, 这也是能在非 SYSTEM 的但拥有这两个特权的令牌上下文下绕过文件和注册表访问判断的缘由。</p><p>Windows 用户模式系统调用层指的是 ntdll.dll 导出的前缀为 Nt 或 Zw 的 API, Windows 用户模式下的 API 最终全会调用这部分以通过软中断陷阱门或者系统调用指令进入内核模式完成最终操作。</p><p>只有当前进程令牌上下文能够启用 SeBackupPrivilege 和 SeRestorePrivilege 的时候, 才能对相关系统调用传入对应选项。毕竟如果这两个特权没有开启的话, 传入了相关选项是会返回错误的, 这也是为什么 Windows 相关实现并没有传入的原因。</p><h2 id="参考实现"><a href="#参考实现" class="headerlink" title="参考实现"></a>参考实现</h2><p>以下实现示例片段摘自 NSudo 恶魔模式。依赖于笔者创建的 <a href="https://github.com/Chuyu-Team/MINT">https://github.com/Chuyu-Team/MINT</a> 库提供的 NT API 定义，并且也依赖于 Microsoft Detours 库。</p><p>完整实现请参阅 <a href="https://github.com/M2Team/NSudo/tree/f29331fad137c36c46066e21f2c14f23c1f6e175/Source/Native/NSudoDevilMode%E3%80%82">https://github.com/M2Team/NSudo/tree/f29331fad137c36c46066e21f2c14f23c1f6e175/Source/Native/NSudoDevilMode。</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;MINT.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;detours.h&quot;</span></span><br><br><br><span class="hljs-keyword">namespace</span> FunctionType<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">    &#123;</span><br>        NtCreateKey,<br>        NtCreateKeyTransacted,<br>        NtOpenKey,<br>        NtOpenKeyTransacted,<br>        NtCreateFile,<br>        NtOpenFile,<br><br>        NtOpenKeyEx,<br>        NtOpenKeyTransactedEx,<br><br>        MaxFunctionType<br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">namespace</span><br>&#123;<br>    HANDLE g_PrivilegedToken;<br><br>    PVOID g_OriginalAddress[FunctionType::MaxFunctionType];<br>    PVOID g_DetouredAddress[FunctionType::MaxFunctionType];<br>&#125;<br><br><br><span class="hljs-function">NTSTATUS <span class="hljs-title">NSudoDevilModeEnterPrivilegedContext</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE OriginalTokenHandle)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (g_PrivilegedToken == INVALID_HANDLE_VALUE)<br>    &#123;<br>        <span class="hljs-keyword">return</span> STATUS_NOT_SUPPORTED;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">NT_SUCCESS</span>(::<span class="hljs-built_in">NtOpenThreadToken</span>(<br>        <span class="hljs-built_in">NtCurrentThread</span>(),<br>        MAXIMUM_ALLOWED,<br>        TRUE,<br>        OriginalTokenHandle)))<br>    &#123;<br>        *OriginalTokenHandle = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ::<span class="hljs-built_in">NtSetInformationThread</span>(<br>        <span class="hljs-built_in">NtCurrentThread</span>(),<br>        ThreadImpersonationToken,<br>        &amp;g_PrivilegedToken,<br>        <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(HANDLE));<br>&#125;<br><br><span class="hljs-function">NTSTATUS <span class="hljs-title">NSudoDevilModeLeavePrivilegedContext</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ HANDLE OriginalTokenHandle)</span></span><br><span class="hljs-function"></span>&#123;<br>    NTSTATUS Status = ::<span class="hljs-built_in">NtSetInformationThread</span>(<br>        <span class="hljs-built_in">NtCurrentThread</span>(),<br>        ThreadImpersonationToken,<br>        &amp;OriginalTokenHandle,<br>        <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(HANDLE));<br><br>    <span class="hljs-keyword">if</span> (OriginalTokenHandle != <span class="hljs-literal">nullptr</span> &amp;&amp;<br>        OriginalTokenHandle != INVALID_HANDLE_VALUE)<br>    &#123;<br>        ::<span class="hljs-built_in">NtClose</span>(OriginalTokenHandle);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Status;<br>&#125;<br><br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">OriginalNtCreateKey</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE KeyHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Reserved_ ULONG TitleIndex,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ PUNICODE_STRING Class,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG CreateOptions,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_opt_ PULONG Disposition)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">decltype</span>(NtCreateKey)*&gt;(<br>        g_OriginalAddress[FunctionType::NtCreateKey])(<br>            KeyHandle,<br>            DesiredAccess,<br>            ObjectAttributes,<br>            TitleIndex,<br>            Class,<br>            CreateOptions,<br>            Disposition);<br>&#125;<br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">DetouredNtCreateKey</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE KeyHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Reserved_ ULONG TitleIndex,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ PUNICODE_STRING Class,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG CreateOptions,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_opt_ PULONG Disposition)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE OriginalTokenHandle = INVALID_HANDLE_VALUE;<br>    NTSTATUS ContextStatus = <span class="hljs-built_in">NSudoDevilModeEnterPrivilegedContext</span>(<br>        &amp;OriginalTokenHandle);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(ContextStatus))<br>    &#123;<br>        CreateOptions |= REG_OPTION_BACKUP_RESTORE;<br>    &#125;<br><br>    NTSTATUS Status = <span class="hljs-built_in">OriginalNtCreateKey</span>(<br>        KeyHandle,<br>        DesiredAccess,<br>        ObjectAttributes,<br>        TitleIndex,<br>        Class,<br>        CreateOptions,<br>        Disposition);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(ContextStatus))<br>    &#123;<br>        <span class="hljs-built_in">NSudoDevilModeLeavePrivilegedContext</span>(OriginalTokenHandle);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Status;<br>&#125;<br><br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">OriginalNtCreateKeyTransacted</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE KeyHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Reserved_ ULONG TitleIndex,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ PUNICODE_STRING Class,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG CreateOptions,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ HANDLE TransactionHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_opt_ PULONG Disposition)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">decltype</span>(NtCreateKeyTransacted)*&gt;(<br>        g_OriginalAddress[FunctionType::NtCreateKeyTransacted])(<br>            KeyHandle,<br>            DesiredAccess,<br>            ObjectAttributes,<br>            TitleIndex,<br>            Class,<br>            CreateOptions,<br>            TransactionHandle,<br>            Disposition);<br>&#125;<br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">DetouredNtCreateKeyTransacted</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE KeyHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Reserved_ ULONG TitleIndex,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ PUNICODE_STRING Class,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG CreateOptions,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ HANDLE TransactionHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_opt_ PULONG Disposition)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE OriginalTokenHandle = INVALID_HANDLE_VALUE;<br>    NTSTATUS ContextStatus = <span class="hljs-built_in">NSudoDevilModeEnterPrivilegedContext</span>(<br>        &amp;OriginalTokenHandle);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(ContextStatus))<br>    &#123;<br>        CreateOptions |= REG_OPTION_BACKUP_RESTORE;<br>    &#125;<br><br>    NTSTATUS Status = <span class="hljs-built_in">OriginalNtCreateKeyTransacted</span>(<br>        KeyHandle,<br>        DesiredAccess,<br>        ObjectAttributes,<br>        TitleIndex,<br>        Class,<br>        CreateOptions,<br>        TransactionHandle,<br>        Disposition);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(ContextStatus))<br>    &#123;<br>        <span class="hljs-built_in">NSudoDevilModeLeavePrivilegedContext</span>(OriginalTokenHandle);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Status;<br>&#125;<br><br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">OriginalNtOpenKey</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE KeyHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">decltype</span>(NtOpenKey)*&gt;(<br>        g_OriginalAddress[FunctionType::NtOpenKey])(<br>            KeyHandle,<br>            DesiredAccess,<br>            ObjectAttributes);<br>&#125;<br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">DetouredNtOpenKey</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE KeyHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes)</span></span><br><span class="hljs-function"></span>&#123;<br>    ULONG Disposition = <span class="hljs-number">0</span>;<br><br>    NTSTATUS Status = <span class="hljs-built_in">DetouredNtCreateKey</span>(<br>        KeyHandle,<br>        DesiredAccess,<br>        ObjectAttributes,<br>        <span class="hljs-number">0</span>,<br>        <span class="hljs-literal">nullptr</span>,<br>        <span class="hljs-number">0</span>,<br>        &amp;Disposition);<br><br>    <span class="hljs-keyword">if</span> (REG_CREATED_NEW_KEY == Disposition)<br>    &#123;<br>        ::<span class="hljs-built_in">NtDeleteKey</span>(*KeyHandle);<br><br>        ::<span class="hljs-built_in">NtClose</span>(*KeyHandle);<br>        *KeyHandle = <span class="hljs-literal">nullptr</span>;<br><br>        Status = STATUS_OBJECT_NAME_NOT_FOUND;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Status;<br>&#125;<br><br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">OriginalNtOpenKeyTransacted</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE KeyHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ HANDLE TransactionHandle)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">decltype</span>(NtOpenKeyTransacted)*&gt;(<br>        g_OriginalAddress[FunctionType::NtOpenKeyTransacted])(<br>            KeyHandle,<br>            DesiredAccess,<br>            ObjectAttributes,<br>            TransactionHandle);<br>&#125;<br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">DetouredNtOpenKeyTransacted</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE KeyHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ HANDLE TransactionHandle)</span></span><br><span class="hljs-function"></span>&#123;<br>    ULONG Disposition = <span class="hljs-number">0</span>;<br><br>    NTSTATUS Status = <span class="hljs-built_in">DetouredNtCreateKeyTransacted</span>(<br>        KeyHandle,<br>        DesiredAccess,<br>        ObjectAttributes,<br>        <span class="hljs-number">0</span>,<br>        <span class="hljs-literal">nullptr</span>,<br>        <span class="hljs-number">0</span>,<br>        TransactionHandle,<br>        &amp;Disposition);<br><br>    <span class="hljs-keyword">if</span> (REG_CREATED_NEW_KEY == Disposition)<br>    &#123;<br>        ::<span class="hljs-built_in">NtDeleteKey</span>(*KeyHandle);<br><br>        ::<span class="hljs-built_in">NtClose</span>(*KeyHandle);<br>        *KeyHandle = <span class="hljs-literal">nullptr</span>;<br><br>        Status = STATUS_OBJECT_NAME_NOT_FOUND;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Status;<br>&#125;<br><br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">OriginalNtOpenKeyEx</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE KeyHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG OpenOptions)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">decltype</span>(NtOpenKeyEx)*&gt;(<br>        g_OriginalAddress[FunctionType::NtOpenKeyEx])(<br>            KeyHandle,<br>            DesiredAccess,<br>            ObjectAttributes,<br>            OpenOptions);<br>&#125;<br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">DetouredNtOpenKeyEx</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE KeyHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG OpenOptions)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE OriginalTokenHandle = INVALID_HANDLE_VALUE;<br>    NTSTATUS ContextStatus = <span class="hljs-built_in">NSudoDevilModeEnterPrivilegedContext</span>(<br>        &amp;OriginalTokenHandle);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(ContextStatus))<br>    &#123;<br>        OpenOptions |= REG_OPTION_BACKUP_RESTORE;<br>    &#125;<br><br>    NTSTATUS Status = <span class="hljs-built_in">OriginalNtOpenKeyEx</span>(<br>        KeyHandle,<br>        DesiredAccess,<br>        ObjectAttributes,<br>        OpenOptions);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(ContextStatus))<br>    &#123;<br>        <span class="hljs-built_in">NSudoDevilModeLeavePrivilegedContext</span>(OriginalTokenHandle);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Status;<br>&#125;<br><br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">OriginalNtOpenKeyTransactedEx</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE KeyHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG OpenOptions,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ HANDLE TransactionHandle)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">decltype</span>(NtOpenKeyTransactedEx)*&gt;(<br>        g_OriginalAddress[FunctionType::NtOpenKeyTransactedEx])(<br>            KeyHandle,<br>            DesiredAccess,<br>            ObjectAttributes,<br>            OpenOptions,<br>            TransactionHandle);<br>&#125;<br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">DetouredNtOpenKeyTransactedEx</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE KeyHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG OpenOptions,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ HANDLE TransactionHandle)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE OriginalTokenHandle = INVALID_HANDLE_VALUE;<br>    NTSTATUS ContextStatus = <span class="hljs-built_in">NSudoDevilModeEnterPrivilegedContext</span>(<br>        &amp;OriginalTokenHandle);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(ContextStatus))<br>    &#123;<br>        OpenOptions |= REG_OPTION_BACKUP_RESTORE;<br>    &#125;<br><br>    NTSTATUS Status = <span class="hljs-built_in">OriginalNtOpenKeyTransactedEx</span>(<br>        KeyHandle,<br>        DesiredAccess,<br>        ObjectAttributes,<br>        OpenOptions,<br>        TransactionHandle);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(ContextStatus))<br>    &#123;<br>        <span class="hljs-built_in">NSudoDevilModeLeavePrivilegedContext</span>(OriginalTokenHandle);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Status;<br>&#125;<br><br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">OriginalNtCreateFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE FileHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ PLARGE_INTEGER AllocationSize,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG FileAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG ShareAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG CreateDisposition,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG CreateOptions,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG EaLength)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">decltype</span>(NtCreateFile)*&gt;(<br>        g_OriginalAddress[FunctionType::NtCreateFile])(<br>            FileHandle,<br>            DesiredAccess,<br>            ObjectAttributes,<br>            IoStatusBlock,<br>            AllocationSize,<br>            FileAttributes,<br>            ShareAccess,<br>            CreateDisposition,<br>            CreateOptions,<br>            EaBuffer,<br>            EaLength);<br>&#125;<br><br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">DetouredNtCreateFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE FileHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_opt_ PLARGE_INTEGER AllocationSize,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG FileAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG ShareAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG CreateDisposition,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG CreateOptions,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_reads_bytes_opt_(EaLength) PVOID EaBuffer,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG EaLength)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE OriginalTokenHandle = INVALID_HANDLE_VALUE;<br>    NTSTATUS ContextStatus = <span class="hljs-built_in">NSudoDevilModeEnterPrivilegedContext</span>(<br>        &amp;OriginalTokenHandle);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(ContextStatus))<br>    &#123;<br>        CreateOptions |= FILE_OPEN_FOR_BACKUP_INTENT;<br>    &#125;<br><br>    NTSTATUS Status = <span class="hljs-built_in">OriginalNtCreateFile</span>(<br>        FileHandle,<br>        DesiredAccess,<br>        ObjectAttributes,<br>        IoStatusBlock,<br>        AllocationSize,<br>        FileAttributes,<br>        ShareAccess,<br>        CreateDisposition,<br>        CreateOptions,<br>        EaBuffer,<br>        EaLength);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(ContextStatus))<br>    &#123;<br>        <span class="hljs-built_in">NSudoDevilModeLeavePrivilegedContext</span>(OriginalTokenHandle);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Status;<br>&#125;<br><br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">OriginalNtOpenFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE FileHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG ShareAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG OpenOptions)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">decltype</span>(NtOpenFile)*&gt;(<br>        g_OriginalAddress[FunctionType::NtOpenFile])(<br>            FileHandle,<br>            DesiredAccess,<br>            ObjectAttributes,<br>            IoStatusBlock,<br>            ShareAccess,<br>            OpenOptions);<br>&#125;<br><br><span class="hljs-function">NTSTATUS NTAPI <span class="hljs-title">DetouredNtOpenFile</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PHANDLE FileHandle,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ACCESS_MASK DesiredAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ POBJECT_ATTRIBUTES ObjectAttributes,</span></span><br><span class="hljs-params"><span class="hljs-function">    _Out_ PIO_STATUS_BLOCK IoStatusBlock,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG ShareAccess,</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ ULONG OpenOptions)</span></span><br><span class="hljs-function"></span>&#123;<br>    HANDLE OriginalTokenHandle = INVALID_HANDLE_VALUE;<br>    NTSTATUS ContextStatus = <span class="hljs-built_in">NSudoDevilModeEnterPrivilegedContext</span>(<br>        &amp;OriginalTokenHandle);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(ContextStatus))<br>    &#123;<br>        OpenOptions |= FILE_OPEN_FOR_BACKUP_INTENT;<br>    &#125;<br><br>    NTSTATUS Status = <span class="hljs-built_in">OriginalNtOpenFile</span>(<br>        FileHandle,<br>        DesiredAccess,<br>        ObjectAttributes,<br>        IoStatusBlock,<br>        ShareAccess,<br>        OpenOptions);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(ContextStatus))<br>    &#123;<br>        <span class="hljs-built_in">NSudoDevilModeLeavePrivilegedContext</span>(OriginalTokenHandle);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Status;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Initialize the NSudo Devil Mode.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NSudoDevilModeInitialize</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    NTSTATUS Status = STATUS_SUCCESS;<br>    HANDLE CurrentProcessToken = INVALID_HANDLE_VALUE;<br><br>    Status = ::<span class="hljs-built_in">NtOpenProcessToken</span>(<br>        <span class="hljs-built_in">NtCurrentProcess</span>(),<br>        MAXIMUM_ALLOWED,<br>        &amp;CurrentProcessToken);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(Status))<br>    &#123;<br>        SECURITY_QUALITY_OF_SERVICE SQOS;<br>        SQOS.Length = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(SECURITY_QUALITY_OF_SERVICE);<br>        SQOS.ImpersonationLevel = SecurityImpersonation;<br>        SQOS.ContextTrackingMode = FALSE;<br>        SQOS.EffectiveOnly = FALSE;<br><br>        OBJECT_ATTRIBUTES OA;<br>        OA.Length = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(OBJECT_ATTRIBUTES);<br>        OA.RootDirectory = <span class="hljs-literal">nullptr</span>;<br>        OA.ObjectName = <span class="hljs-literal">nullptr</span>;<br>        OA.Attributes = <span class="hljs-number">0</span>;<br>        OA.SecurityDescriptor = <span class="hljs-literal">nullptr</span>;<br>        OA.SecurityQualityOfService = &amp;SQOS;<br><br>        Status = ::<span class="hljs-built_in">NtDuplicateToken</span>(<br>            CurrentProcessToken,<br>            MAXIMUM_ALLOWED,<br>            &amp;OA,<br>            FALSE,<br>            TokenImpersonation,<br>            &amp;g_PrivilegedToken);<br><br>        ::<span class="hljs-built_in">NtClose</span>(CurrentProcessToken);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">NT_SUCCESS</span>(Status))<br>    &#123;<br>        <span class="hljs-keyword">uint8_t</span> TPBlock[<span class="hljs-number">2</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(LUID_AND_ATTRIBUTES) + <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(DWORD)];<br>        PTOKEN_PRIVILEGES pTP = <span class="hljs-keyword">reinterpret_cast</span>&lt;PTOKEN_PRIVILEGES&gt;(TPBlock);<br><br>        pTP-&gt;PrivilegeCount = <span class="hljs-number">2</span>;<br><br>        pTP-&gt;Privileges[<span class="hljs-number">0</span>].Luid.LowPart = SE_BACKUP_PRIVILEGE;<br>        pTP-&gt;Privileges[<span class="hljs-number">0</span>].Luid.HighPart = <span class="hljs-number">0</span>;<br>        pTP-&gt;Privileges[<span class="hljs-number">0</span>].Attributes = SE_PRIVILEGE_ENABLED;<br><br>        pTP-&gt;Privileges[<span class="hljs-number">1</span>].Luid.LowPart = SE_RESTORE_PRIVILEGE;<br>        pTP-&gt;Privileges[<span class="hljs-number">1</span>].Luid.HighPart = <span class="hljs-number">0</span>;<br>        pTP-&gt;Privileges[<span class="hljs-number">1</span>].Attributes = SE_PRIVILEGE_ENABLED;<br><br>        Status = ::<span class="hljs-built_in">NtAdjustPrivilegesToken</span>(<br>            g_PrivilegedToken,<br>            FALSE,<br>            pTP,<br>            <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(TPBlock),<br>            <span class="hljs-literal">nullptr</span>,<br>            <span class="hljs-literal">nullptr</span>);<br>        <span class="hljs-keyword">if</span> (ERROR_SUCCESS != Status)<br>        &#123;<br>            ::<span class="hljs-built_in">NtClose</span>(g_PrivilegedToken);<br>            Status = STATUS_NOT_SUPPORTED;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">NT_SUCCESS</span>(Status))<br>    &#123;<br>        g_PrivilegedToken = INVALID_HANDLE_VALUE;<br>    &#125;<br><br>    g_OriginalAddress[FunctionType::NtCreateKey] =<br>        ::NtCreateKey;<br>    g_DetouredAddress[FunctionType::NtCreateKey] =<br>        ::DetouredNtCreateKey;<br><br>    g_OriginalAddress[FunctionType::NtCreateKeyTransacted] =<br>        ::NtCreateKeyTransacted;<br>    g_DetouredAddress[FunctionType::NtCreateKeyTransacted] =<br>        ::DetouredNtCreateKeyTransacted;<br><br>    g_OriginalAddress[FunctionType::NtOpenKey] =<br>        ::NtOpenKey;<br>    g_DetouredAddress[FunctionType::NtOpenKey] =<br>        ::DetouredNtOpenKey;<br><br>    g_OriginalAddress[FunctionType::NtOpenKeyTransacted] =<br>        ::NtOpenKeyTransacted;<br>    g_DetouredAddress[FunctionType::NtOpenKeyTransacted] =<br>        ::DetouredNtOpenKeyTransacted;<br><br>    g_OriginalAddress[FunctionType::NtCreateFile] =<br>        ::NtCreateFile;<br>    g_DetouredAddress[FunctionType::NtCreateFile] =<br>        ::DetouredNtCreateFile;<br><br>    g_OriginalAddress[FunctionType::NtOpenFile] =<br>        ::NtOpenFile;<br>    g_DetouredAddress[FunctionType::NtOpenFile] =<br>        ::DetouredNtOpenFile;<br><br>    UNICODE_STRING NtdllName;<br>    ::<span class="hljs-built_in">RtlInitUnicodeString</span>(<br>        &amp;NtdllName,<br>        <span class="hljs-keyword">const_cast</span>&lt;PWSTR&gt;(<span class="hljs-string">L&quot;ntdll.dll&quot;</span>));<br>    PVOID NtdllModuleHandle = <span class="hljs-literal">nullptr</span>;<br>    ::<span class="hljs-built_in">LdrGetDllHandleEx</span>(<br>        <span class="hljs-number">0</span>,<br>        <span class="hljs-literal">nullptr</span>,<br>        <span class="hljs-literal">nullptr</span>,<br>        &amp;NtdllName,<br>        &amp;NtdllModuleHandle);<br>    <span class="hljs-keyword">if</span> (NtdllModuleHandle)<br>    &#123;<br>        ANSI_STRING FunctionName;<br><br>        ::<span class="hljs-built_in">RtlInitAnsiString</span>(<br>            &amp;FunctionName,<br>            <span class="hljs-keyword">const_cast</span>&lt;PSTR&gt;(<span class="hljs-string">&quot;NtOpenKeyEx&quot;</span>));<br>        ::<span class="hljs-built_in">LdrGetProcedureAddress</span>(<br>            NtdllModuleHandle,<br>            &amp;FunctionName,<br>            <span class="hljs-number">0</span>,<br>            &amp;g_OriginalAddress[FunctionType::NtOpenKeyEx]);<br>        g_DetouredAddress[FunctionType::NtOpenKeyEx] =<br>            ::DetouredNtOpenKeyEx;<br><br>        ::<span class="hljs-built_in">RtlInitAnsiString</span>(<br>            &amp;FunctionName,<br>            <span class="hljs-keyword">const_cast</span>&lt;PSTR&gt;(<span class="hljs-string">&quot;NtOpenKeyTransactedEx&quot;</span>));<br>        ::<span class="hljs-built_in">LdrGetProcedureAddress</span>(<br>            NtdllModuleHandle,<br>            &amp;FunctionName,<br>            <span class="hljs-number">0</span>,<br>            &amp;g_OriginalAddress[FunctionType::NtOpenKeyTransactedEx]);<br>        g_DetouredAddress[FunctionType::NtOpenKeyTransactedEx] =<br>            ::DetouredNtOpenKeyTransactedEx;<br><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Uninitialize the NSudo Devil Mode.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">NSudoDevilModeUninitialize</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (g_PrivilegedToken != INVALID_HANDLE_VALUE)<br>    &#123;<br>        ::<span class="hljs-built_in">NtClose</span>(g_PrivilegedToken);<br>    &#125;<br>&#125;<br><br><span class="hljs-function">BOOL APIENTRY <span class="hljs-title">DllMain</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    HMODULE Module,</span></span><br><span class="hljs-params"><span class="hljs-function">    DWORD  Reason,</span></span><br><span class="hljs-params"><span class="hljs-function">    LPVOID Reserved)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">UNREFERENCED_PARAMETER</span>(Module);<br>    <span class="hljs-built_in">UNREFERENCED_PARAMETER</span>(Reserved);<br><br>    <span class="hljs-keyword">if</span> (DLL_PROCESS_ATTACH == Reason || DLL_PROCESS_DETACH == Reason)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (DLL_PROCESS_ATTACH == Reason)<br>        &#123;<br>            <span class="hljs-built_in">NSudoDevilModeInitialize</span>();<br>        &#125;<br><br>        <span class="hljs-built_in">DetourTransactionBegin</span>();<br>        <span class="hljs-built_in">DetourUpdateThread</span>(<span class="hljs-built_in">NtCurrentThread</span>());<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; FunctionType::MaxFunctionType; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (g_OriginalAddress[i])<br>            &#123;<br>                <span class="hljs-keyword">if</span> (DLL_PROCESS_ATTACH == Reason)<br>                &#123;<br>                    <span class="hljs-built_in">DetourAttach</span>(<br>                        &amp;g_OriginalAddress[i],<br>                        g_DetouredAddress[i]);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (DLL_PROCESS_DETACH == Reason)<br>                &#123;<br>                    <span class="hljs-built_in">DetourDetach</span>(<br>                        &amp;g_OriginalAddress[i],<br>                        g_DetouredAddress[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">DetourTransactionCommit</span>();<br><br>        <span class="hljs-keyword">if</span> (DLL_PROCESS_DETACH == Reason)<br>        &#123;<br>            <span class="hljs-built_in">NSudoDevilModeUninitialize</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> TRUE;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://bbs.pediy.com/thread-257345.htm">NSudo 恶魔模式 - 一个面向希望无视文件和注册表访问检查的开发者的解决方案</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>用户模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>用户模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 NT API 整理内存碎片</title>
    <link href="/zh/2021/11/14/Defrag-memory-with-NT-API/"/>
    <url>/zh/2021/11/14/Defrag-memory-with-NT-API/</url>
    
    <content type="html"><![CDATA[<p>在系统运行过程中，内存中不可避免地会产生一些内存碎片，这会影响系统的执行效率，因此适时整理内存碎片是有必要的。</p><p>现在市面上大部分的内存碎片整理工具通过尽可能让系统分配内存块把尽可能多的内存块挤入交换文件然后再释放以达成目的。我感觉这个方法不够优雅，毕竟这要求你的内存碎片整理工具一定运行在 Native 模式而不是 WoW 兼容层中，譬如如果你的工具是32 位的话最多只能向系统请求 4GB 的内存，无法达到你的目的。而且由于是被迫让系统把内存块挤入交换文件，于是运行效率不高，而且也给系统调度机制带来了很大的影响。</p><p>于是本文提出一种新的内存碎片整理方式，通过调用 NT API 通知内核主动将内存块移动到交换文件，于是整理速度非常快，而且对系统调度机制的影响也最小。</p><h2 id="灵感来源"><a href="#灵感来源" class="headerlink" title="灵感来源"></a>灵感来源</h2><p>当我使用 Sysinternals Suite 的 RAMMap 工具的 Empty 菜单的功能的时候，发现通过适当的顺序操作可以高效地整理内存碎片。</p><p>于是用 IDA Pro 分析了下 RAMMap 工具的相关功能，并对自己的发现进行总结，编写示例和本文。</p><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><p>需要以管理员身份运行你的二进制。</p><p>首先启用当前进程的 SeProfileSingleProcessPrivilege 特权，然后调用 NtSetSystemInformation，分别向 SystemMemoryListInformation 传入 MemoryEmptyWorkingSets, MemoryFlushModifiedList 和 MemoryPurgeStandbyList 即可完成内存碎片整理。</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><p>以下示例依赖于笔者创建的 <a href="https://github.com/Chuyu-Team/MINT">https://github.com/Chuyu-Team/MINT</a> 库提供的 NT API 定义。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;MINT.h&gt;</span></span><br><br><span class="hljs-keyword">namespace</span><br>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">static</span> HRESULT <span class="hljs-title">DefragMemory</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">using</span> NtSetSystemInformationType = <span class="hljs-keyword">decltype</span>(::NtSetSystemInformation)*;<br>        <span class="hljs-keyword">using</span> RtlNtStatusToDosErrorType = <span class="hljs-keyword">decltype</span>(::RtlNtStatusToDosError)*;<br><br>        NtSetSystemInformationType pNtSetSystemInformation = <span class="hljs-literal">nullptr</span>;<br>        RtlNtStatusToDosErrorType pRtlNtStatusToDosError = <span class="hljs-literal">nullptr</span>;<br><br>        HMODULE ModuleHandle = ::<span class="hljs-built_in">GetModuleHandleW</span>(<span class="hljs-string">L&quot;ntdll.dll&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!ModuleHandle)<br>        &#123;<br>            <span class="hljs-keyword">return</span> E_NOINTERFACE;<br>        &#125;<br><br>        pNtSetSystemInformation = <span class="hljs-keyword">reinterpret_cast</span>&lt;NtSetSystemInformationType&gt;(<br>            ::<span class="hljs-built_in">GetProcAddress</span>(ModuleHandle, <span class="hljs-string">&quot;NtSetSystemInformation&quot;</span>));<br>        <span class="hljs-keyword">if</span> (!pNtSetSystemInformation)<br>        &#123;<br>            <span class="hljs-keyword">return</span> E_NOINTERFACE;<br>        &#125;<br><br>        pRtlNtStatusToDosError = <span class="hljs-keyword">reinterpret_cast</span>&lt;RtlNtStatusToDosErrorType&gt;(<br>            ::<span class="hljs-built_in">GetProcAddress</span>(ModuleHandle, <span class="hljs-string">&quot;RtlNtStatusToDosError&quot;</span>));<br>        <span class="hljs-keyword">if</span> (!pRtlNtStatusToDosError)<br>        &#123;<br>            <span class="hljs-keyword">return</span> E_NOINTERFACE;<br>        &#125;<br><br>        <span class="hljs-comment">// Working Sets -&gt; Modified Page List -&gt; Standby List</span><br><br>        SYSTEM_MEMORY_LIST_COMMAND CommandList[] =<br>        &#123;<br>            SYSTEM_MEMORY_LIST_COMMAND::MemoryEmptyWorkingSets,<br>            SYSTEM_MEMORY_LIST_COMMAND::MemoryFlushModifiedList,<br>            SYSTEM_MEMORY_LIST_COMMAND::MemoryPurgeStandbyList<br>        &#125;;<br><br>        NTSTATUS Status = STATUS_SUCCESS;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(CommandList) / <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(*CommandList); ++i)<br>        &#123;<br>            Status = <span class="hljs-built_in">pNtSetSystemInformation</span>(<br>                SystemMemoryListInformation,<br>                &amp;CommandList[i],<br>                <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(SYSTEM_MEMORY_LIST_COMMAND));<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">NT_SUCCESS</span>(Status))<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Mile::HResult::<span class="hljs-built_in">FromWin32</span>(<span class="hljs-built_in">pRtlNtStatusToDosError</span>(Status));<br>    &#125;<br>&#125;<br><br><span class="hljs-function">EXTERN_C HRESULT WINAPI <span class="hljs-title">MoDefragMemory</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ PNSUDO_CONTEXT Context)</span></span><br><span class="hljs-function"></span>&#123;<br>    Mile::HResult hr = S_OK;<br>    HANDLE CurrentProcessToken = INVALID_HANDLE_VALUE;<br><br>    <span class="hljs-keyword">if</span> (::<span class="hljs-built_in">OpenProcessToken</span>(<br>        ::<span class="hljs-built_in">GetCurrentProcess</span>(),<br>        MAXIMUM_ALLOWED,<br>        &amp;CurrentProcessToken))<br>    &#123;<br>        LUID_AND_ATTRIBUTES RawPrivilege;<br>        RawPrivilege.Attributes = SE_PRIVILEGE_ENABLED;<br>        <span class="hljs-keyword">if</span> (::<span class="hljs-built_in">LookupPrivilegeValueW</span>(<br>            <span class="hljs-literal">nullptr</span>,<br>            SE_PROF_SINGLE_PROCESS_NAME,<br>            &amp;RawPrivilege.Luid))<br>        &#123;<br>            hr = Mile::<span class="hljs-built_in">AdjustTokenPrivilegesSimple</span>(<br>                CurrentProcessToken,<br>                &amp;RawPrivilege,<br>                <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (hr.<span class="hljs-built_in">IsSucceeded</span>())<br>            &#123;<br>                hr = ::<span class="hljs-built_in">DefragMemory</span>();<br>            &#125;<br>        &#125;<br><br>        ::<span class="hljs-built_in">CloseHandle</span>(CurrentProcessToken);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> hr;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>用户模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>用户模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 C++ 使用系统还原</title>
    <link href="/zh/2021/11/14/Using-System-Restore-with-Cpp/"/>
    <url>/zh/2021/11/14/Using-System-Restore-with-Cpp/</url>
    
    <content type="html"><![CDATA[<p>本文用来总结如何通过 C++ 使用系统还原。由于阅读本文的读者肯定是想知道更多内容，于是我会尽可能做出精练的描述。</p><h2 id="还原点类型"><a href="#还原点类型" class="headerlink" title="还原点类型"></a>还原点类型</h2><table><thead><tr><th>名称</th><th>值</th><th>意义</th><th>备注</th></tr></thead><tbody><tr><td>APPLICATION_INSTALL</td><td>0</td><td>程序安装</td><td></td></tr><tr><td>APPLICATION_UNINSTALL</td><td>1</td><td>程序卸载</td><td></td></tr><tr><td>DESKTOP_SETTING</td><td>2</td><td>未知</td><td>微软未公开类型</td></tr><tr><td>ACCESSIBILITY_SETTING</td><td>3</td><td>未知</td><td>微软未公开类型</td></tr><tr><td>OE_SETTING</td><td>4</td><td>未知</td><td>微软未公开类型</td></tr><tr><td>APPLICATION_RUN</td><td>5</td><td>未知</td><td>微软未公开类型</td></tr><tr><td>RESTORE</td><td>6</td><td>撤销还原</td><td>微软未公开类型</td></tr><tr><td>CHECKPOINT</td><td>7</td><td>系统检查点</td><td>微软未公开类型</td></tr><tr><td>WINDOWS_SHUTDOWN</td><td>8</td><td>未知</td><td>微软未公开类型</td></tr><tr><td>WINDOWS_BOOT</td><td>9</td><td>未知</td><td>微软未公开类型</td></tr><tr><td>DEVICE_DRIVER_INSTALL</td><td>10</td><td>驱动安装</td><td></td></tr><tr><td>FIRSTRUN</td><td>11</td><td>未知</td><td>微软未公开类型</td></tr><tr><td>MODIFY_SETTINGS</td><td>12</td><td>更改设置</td><td></td></tr><tr><td>CANCELLED_OPERATION</td><td>13</td><td>取消操作</td><td></td></tr><tr><td>BACKUP_RECOVERY</td><td>14</td><td>备份恢复</td><td>微软未公开类型</td></tr><tr><td>MANUAL_CHECKPOINT</td><td>16</td><td>手动</td><td>微软未公开类型</td></tr><tr><td>WINDOWS_UPDATE</td><td>17</td><td>Windows Update</td><td>微软未公开类型</td></tr><tr><td>CRITICAL_UPDATE</td><td>18</td><td>关键更新</td><td>微软未公开类型</td></tr></tbody></table><h2 id="还原点事件类型"><a href="#还原点事件类型" class="headerlink" title="还原点事件类型"></a>还原点事件类型</h2><table><thead><tr><th>名称</th><th>值</th><th>意义</th></tr></thead><tbody><tr><td>BEGIN_SYSTEM_CHANGE</td><td>100</td><td>开始系统更改</td></tr><tr><td>END_SYSTEM_CHANGE</td><td>101</td><td>结束系统更改</td></tr><tr><td>BEGIN_NESTED_SYSTEM_CHANGE</td><td>102</td><td>开始系统更改（不创建附加还原点）</td></tr><tr><td>END_NESTED_SYSTEM_CHANGE</td><td>103</td><td>结束系统更改（不创建附加还原点）</td></tr></tbody></table><h2 id="系统还原-API-返回值"><a href="#系统还原-API-返回值" class="headerlink" title="系统还原 API 返回值"></a>系统还原 API 返回值</h2><table><thead><tr><th>名称</th><th>意义</th></tr></thead><tbody><tr><td>ERROR_SUCCESS</td><td>操作成功完成</td></tr><tr><td>ERROR_BAD_ENVIRONMENT</td><td>不能在安全模式调用</td></tr><tr><td>ERROR_DISK_FULL</td><td>磁盘已满</td></tr><tr><td>ERROR_INTERNAL_ERROR</td><td>发生内部错误</td></tr><tr><td>ERROR_INVALID_DATA</td><td>还原点序号错误</td></tr><tr><td>ERROR_SERVICE_DISABLED</td><td>系统还原已关闭</td></tr><tr><td>ERROR_TIMEOUT</td><td>操作超时</td></tr></tbody></table><h2 id="简化版系统还原-API-定义"><a href="#简化版系统还原-API-定义" class="headerlink" title="简化版系统还原 API 定义"></a>简化版系统还原 API 定义</h2><p>虽然 Windows SDK 中有系统还原 API 的头文件，但由于系统还原 API 需要进行动态加载，且为了方便在一些没有系统还原 API 头文件的编译环境使用，于是我特意整理了大部分人需要用到的内容。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Event Type of Restore Points.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">RESTORE_POINT_EVENT_TYPE</span></span><br><span class="hljs-class">&#123;</span><br>    BeginSystemChange = <span class="hljs-number">100</span>,<br>    EndSystemChange,<br>    EndNestedSystemChange = <span class="hljs-number">103</span>,<br>    BeginNestedSystemChange<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Type of Restore Points.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">RESTORE_POINT_TYPE</span></span><br><span class="hljs-class">&#123;</span><br>    ApplicationInstall,<br>    ApplicationUninstall,<br>    DesktopSetting,<br>    AccessibilitySetting,<br>    OESetting,<br>    ApplicationRun,<br>    Restore,<br>    CheckPoint,<br>    WindowsShutdown,<br>    WindowsBoot,<br>    DeviceDriverInstall,<br>    FirstRun,<br>    ModifySettings,<br>    CancelledOperation,<br>    BackupRecovery,<br>    Backup,<br>    ManualCheckPoint,<br>    WindowsUpdate,<br>    CriticalUpdate<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief For Windows Millennium compatibility.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack(push, srrestoreptapi_include)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack(1)</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Restore point information.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">RESTOREPTINFOW</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">// Type of Event - Begin or End.</span><br>    DWORD dwEventType;<br><br>    <span class="hljs-comment">// Type of Restore Point - App install/uninstall.</span><br>    DWORD dwRestorePtType;<br><br>    <span class="hljs-comment">// Sequence Number - 0 for begin.</span><br>    INT64 llSequenceNumber;<br><br>    <span class="hljs-comment">// Description - Name of Application / Operation.</span><br>    WCHAR szDescription[<span class="hljs-number">256</span>];<br><br>&#125; RESTOREPOINTINFOW, * PRESTOREPOINTINFOW;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief Status returned by System Restore.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">SMGRSTATUS</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-comment">// Status returned by State Manager Process.</span><br>    DWORD   nStatus;<br><br>    <span class="hljs-comment">// Sequence Number for the restore point.</span><br>    INT64   llSequenceNumber;<br><br>&#125; STATEMGRSTATUS, * PSTATEMGRSTATUS;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> pack(pop, srrestoreptapi_include)</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief RPC call to set a restore point.</span><br><span class="hljs-comment"> * @return If the call succeeds, the return value is TRUE. If the call</span><br><span class="hljs-comment"> *         fails, the return value is FALSE. If pSmgrStatus nStatus field</span><br><span class="hljs-comment"> *         is set as follows:</span><br><span class="hljs-comment"> *         ERROR_SUCCESS</span><br><span class="hljs-comment"> *             If the call succeeded (return value will be TRUE).</span><br><span class="hljs-comment"> *         ERROR_TIMEOUT</span><br><span class="hljs-comment"> *             If the call timed out due to a wait on a mutex for setting</span><br><span class="hljs-comment"> *             restore points.</span><br><span class="hljs-comment"> *         ERROR_INVALID_DATA</span><br><span class="hljs-comment"> *             If the cancel restore point is called with an invalid</span><br><span class="hljs-comment"> *             sequence number.</span><br><span class="hljs-comment"> *         ERROR_INTERNAL_ERROR</span><br><span class="hljs-comment"> *             If there are internal failures.</span><br><span class="hljs-comment"> *         ERROR_BAD_ENVIRONMENT</span><br><span class="hljs-comment"> *             If the API is called in SafeMode.</span><br><span class="hljs-comment"> *         ERROR_SERVICE_DISABLED</span><br><span class="hljs-comment"> *             If System Restore is Disabled.</span><br><span class="hljs-comment"> *         ERROR_DISK_FULL</span><br><span class="hljs-comment"> *             If System Restore is frozen (Windows Whistler only).</span><br><span class="hljs-comment"> *         ERROR_ALREADY_EXISTS</span><br><span class="hljs-comment"> *             If this is a nested restore point.</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span><br>&#123;<br>    <span class="hljs-function">BOOL WINAPI <span class="hljs-title">SRSetRestorePointW</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ PRESTOREPOINTINFOW pRestorePtSpec,</span></span><br><span class="hljs-params"><span class="hljs-function">        _Out_ PSTATEMGRSTATUS   pSMgrStatus)</span></span>;<br><br>    <span class="hljs-function">DWORD WINAPI <span class="hljs-title">SRRemoveRestorePoint</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ DWORD dwRPNum)</span></span>;<br><br>    <span class="hljs-function">DWORD WINAPI <span class="hljs-title">EnableSR</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ LPCWSTR lpDrive)</span></span>;<br><br>    <span class="hljs-function">DWORD WINAPI <span class="hljs-title">DisableSR</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        _In_ LPCWSTR lpDrive)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>SRSetRestorePointW</code> 用于创建和取消还原点，<code>SRRemoveRestorePoint</code> 用于删除指定的还原点，<code>EnableSR</code> 用于启用特定分区的系统还原，<code>DisableSR</code> 用于禁用用特定分区的系统还原。</p><p>在微软文档中仅对 <code>SRSetRestorePointW</code> 和 <code>SRRemoveRestorePoint</code> 进行了文档化属于公开 API，<code>EnableSR</code> 和<code>DisableSR</code> 仅在系统还原 API 头文件进行了定义，于是属于半文档化 API。</p><h2 id="创建和取消还原点"><a href="#创建和取消还原点" class="headerlink" title="创建和取消还原点"></a>创建和取消还原点</h2><p>使用 <code>SRSetRestorePointW</code> API 即可。</p><h2 id="删除指定序号的还原点"><a href="#删除指定序号的还原点" class="headerlink" title="删除指定序号的还原点"></a>删除指定序号的还原点</h2><p>使用 <code>SRRemoveRestorePoint</code> API 即可。</p><h2 id="启用系统还原"><a href="#启用系统还原" class="headerlink" title="启用系统还原"></a>启用系统还原</h2><p>使用 <code>EnableSR</code> API 即可。</p><h2 id="禁用系统还原"><a href="#禁用系统还原" class="headerlink" title="禁用系统还原"></a>禁用系统还原</h2><p>使用 <code>DisableSR</code> API 即可。</p><h2 id="遍历还原点"><a href="#遍历还原点" class="headerlink" title="遍历还原点"></a>遍历还原点</h2><p>由于系统还原 API 并没有提供遍历还原点的功能，于是需要调用 WMI API 通过 WMI 去遍历系统还原点。</p><h2 id="清理还原点"><a href="#清理还原点" class="headerlink" title="清理还原点"></a>清理还原点</h2><p>由于在 C++ 下调用 WMI API 通过 WMI 去遍历系统还原点是一件很麻烦的事情，由于从 Windows Vista 开始系统还原基于卷影复制，于是建议直接使用卷影复制 API 去删除卷影副本。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://bbs.pcbeta.com/viewthread-1507617-1-1.html">Windows系统还原新探（Windows系统还原的较深入研究）</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1535789-1-1.html">反汇编Windows系统还原代码的成果</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><ul><li><a href="/zh/2021/11/14/The-usage-of-System-Restore/" title="系统还原的使用方法">系统还原的使用方法</a></li><li><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>系统还原</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>系统还原</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过 C# 使用系统还原</title>
    <link href="/zh/2021/11/14/Using-System-Restore-with-CSharp/"/>
    <url>/zh/2021/11/14/Using-System-Restore-with-CSharp/</url>
    
    <content type="html"><![CDATA[<p>本文用来总结如何通过 C# 使用系统还原。</p><h2 id="使用-Win32-API-创建系统还原点"><a href="#使用-Win32-API-创建系统还原点" class="headerlink" title="使用 Win32 API 创建系统还原点"></a>使用 Win32 API 创建系统还原点</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">StructLayout(LayoutKind.Sequential)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> RESTOREPOINTINFO<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwEventType;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> dwRestorePtType;<br>    <span class="hljs-keyword">public</span> Int64 llSequenceNumber;<br>    [<span class="hljs-meta">MarshalAs(UnmanagedType.ByValTStr, SizeConst = 257)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> szDescription;<br>&#125;<br><br>[<span class="hljs-meta">StructLayout(LayoutKind.Sequential)</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">struct</span> STATEMGRSTATUS<br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">uint</span> nStatus;<br>    <span class="hljs-keyword">public</span> Int64 llSequenceNumber;<br>&#125;<br><br>[<span class="hljs-meta">DllImport(<span class="hljs-meta-string">&quot;SrClient.dll&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">SRSetRestorePoint</span>(<span class="hljs-params"><span class="hljs-keyword">ref</span> RESTOREPOINTINFO SRPInfo, <span class="hljs-keyword">ref</span> STATEMGRSTATUS SRPStatus</span>)</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>&#123;<br><br>    RegistryKey SystemRestoreKey = Registry.LocalMachine.OpenSubKey(<span class="hljs-string">&quot;Software\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore&quot;</span>,<span class="hljs-literal">true</span>);<br>    SystemRestoreKey.SetValue(<span class="hljs-string">&quot;SystemRestorePointCreationFrequency&quot;</span>, <span class="hljs-number">0</span>,RegistryValueKind.DWord);<br><br>    <span class="hljs-built_in">bool</span> result = <span class="hljs-literal">false</span>;<br>    RESTOREPOINTINFO RPInfo = <span class="hljs-keyword">new</span> RESTOREPOINTINFO();<br>    STATEMGRSTATUS RPStatus = <span class="hljs-keyword">new</span> STATEMGRSTATUS();<br><br>    RPInfo.dwEventType = <span class="hljs-number">100</span>;<br>    RPInfo.dwRestorePtType = <span class="hljs-number">0</span>;<br>    RPInfo.llSequenceNumber = <span class="hljs-number">0</span>;<br>    RPInfo.szDescription = <span class="hljs-string">&quot;系统还原点&quot;</span>;<br><br>    result = SRSetRestorePoint(<span class="hljs-keyword">ref</span> RPInfo, <span class="hljs-keyword">ref</span> RPStatus);<br><br>    SystemRestoreKey.DeleteValue(<span class="hljs-string">&quot;SystemRestorePointCreationFrequency&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-WMI-创建系统还原点"><a href="#使用-WMI-创建系统还原点" class="headerlink" title="使用 WMI 创建系统还原点"></a>使用 WMI 创建系统还原点</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">CreateSRP</span><span class="hljs-params">(string RPName, <span class="hljs-keyword">int</span> RPType, <span class="hljs-keyword">int</span> EventType)</span></span><br><span class="hljs-function"></span>&#123;<br>    ManagementClass SRClass = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ManagementClass</span>(<span class="hljs-string">&quot;//./root/default:SystemRestore&quot;</span>);<br><br>    ManagementBaseObject SRArgs = SRClass.<span class="hljs-built_in">GetMethodParameters</span>(<span class="hljs-string">&quot;CreateRestorePoint&quot;</span>);<br>    SRArgs[<span class="hljs-string">&quot;Description&quot;</span>] = RPName;<br>    SRArgs[<span class="hljs-string">&quot;RestorePointType&quot;</span>] = RPType;<br>    SRArgs[<span class="hljs-string">&quot;EventType&quot;</span>] = EventType;<br><br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        ManagementBaseObject outParams = SRClass.<span class="hljs-built_in">InvokeMethod</span>(<span class="hljs-string">&quot;CreateRestorePoint&quot;</span>, SRArgs, <span class="hljs-keyword">new</span> <span class="hljs-built_in">InvokeMethodOptions</span>(null, System.TimeSpan.MaxValue));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">catch</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span><span class="hljs-params">(string[] args)</span></span><br><span class="hljs-function"></span>&#123;<br>    value = <span class="hljs-built_in">CreateSRP</span>(<span class="hljs-string">&quot;系统还原点&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">100</span>);<br>    <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">Write</span>(<span class="hljs-string">&quot;Success&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">Write</span>(<span class="hljs-string">&quot;Failed&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">Read</span>();<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-AlphaVSS-库删除所有系统还原点"><a href="#使用-AlphaVSS-库删除所有系统还原点" class="headerlink" title="使用 AlphaVSS 库删除所有系统还原点"></a>使用 AlphaVSS 库删除所有系统还原点</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">using</span> <span class="hljs-keyword">System</span>;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">System</span>.Collections.Generic;<br><span class="hljs-keyword">using</span> <span class="hljs-keyword">System</span>.Linq;<br><span class="hljs-keyword">using</span> Alphaleonis.Win32.Vss;<br><br>namespace SRDemoVSS<br>&#123;<br>    <span class="hljs-keyword">class</span> Program<br>    &#123;<br>        static <span class="hljs-type">void</span> Main(string[] args)<br>        &#123;<br><br>            IVssImplementation vssImplementation = VssUtils.LoadImplementation();<br>            <span class="hljs-keyword">using</span> (IVssBackupComponents backupComponents = vssImplementation.CreateVssBackupComponents())<br>            &#123;<br>                backupComponents.InitializeForBackup(<span class="hljs-keyword">null</span>);<br><br>                backupComponents.SetContext(VssSnapshotContext.<span class="hljs-keyword">All</span>);<br><br>                IList&lt;VssSnapshotProperties&gt; snapshots = backupComponents.QuerySnapshots().ToArray();<br><br>                <span class="hljs-keyword">if</span> (snapshots.Count == <span class="hljs-number">0</span>)<br>                &#123;<br>                    Console.WriteLine(&quot;There were no shadow copies on the system.&quot;);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                try<br>                &#123;<br>                    <span class="hljs-keyword">foreach</span> (VssSnapshotProperties <span class="hljs-keyword">snapshot</span> <span class="hljs-keyword">in</span> snapshots)<br>                    &#123;<br>                        Console.WriteLine(<br>                            &quot;- Deleting shadow copy &#123;0:B&#125; on &#123;1&#125; from provider &#123;2&#125; [&#123;3&#125;]...&quot;, <br>                            <span class="hljs-keyword">snapshot</span>.SnapshotId,<br>                            <span class="hljs-keyword">snapshot</span>.OriginalVolumeName, <br>                            <span class="hljs-keyword">snapshot</span>.ProviderId, <br>                            <span class="hljs-keyword">snapshot</span>.SnapshotAttributes);<br>                        backupComponents.DeleteSnapshot(<span class="hljs-keyword">snapshot</span>.SnapshotId, <span class="hljs-keyword">false</span>);<br>                    &#125;<br>                &#125;<br>                finally &#123; &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-Win32-API-和-WMI-删除所有系统还原点"><a href="#使用-Win32-API-和-WMI-删除所有系统还原点" class="headerlink" title="使用 Win32 API 和 WMI 删除所有系统还原点"></a>使用 Win32 API 和 WMI 删除所有系统还原点</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Management;<br><span class="hljs-keyword">using</span> System.Runtime.InteropServices;<br><br><span class="hljs-keyword">namespace</span> SRDeleteDemoAPI<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span></span><br><span class="hljs-class">    &#123;</span><br>        [<span class="hljs-built_in">DllImport</span>(<span class="hljs-string">&quot;SrClient.dll&quot;</span>)]<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">SRRemoveRestorePoint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> dwRPNum)</span></span>;<br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span><span class="hljs-params">(string[] args)</span></span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">try</span><br>            &#123;<br>                ManagementObjectSearcher SRObject = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ManagementObjectSearcher</span>(<span class="hljs-string">&quot;root/default&quot;</span>, <span class="hljs-string">&quot;SELECT * FROM SystemRestore&quot;</span>);<br>                foreach (ManagementObject SRInfo in SRObject.<span class="hljs-built_in">Get</span>())<br>                &#123;<br>                    <span class="hljs-built_in">SRRemoveRestorePoint</span>(Convert.<span class="hljs-built_in">ToInt32</span>(SRInfo[<span class="hljs-string">&quot;SequenceNumber&quot;</span>].<span class="hljs-built_in">ToString</span>()));<br>                &#125;<br>                <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">WriteLine</span>(<span class="hljs-string">&quot;Success&quot;</span>);<br>            &#125;<br>            <span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (Exception)<br>            &#123;<br>                <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">WriteLine</span>(<span class="hljs-string">&quot;Failure&quot;</span>);<br>            &#125;            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-WMI-执行系统还原"><a href="#使用-WMI-执行系统还原" class="headerlink" title="使用 WMI 执行系统还原"></a>使用 WMI 执行系统还原</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Management;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">RestoreFromRestorePoint</span><span class="hljs-params">(<span class="hljs-keyword">int</span> RPNum)</span></span><br><span class="hljs-function"></span>&#123;<br>    ManagementClass SRClass = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ManagementClass</span>(<span class="hljs-string">&quot;//./root/default:SystemRestore&quot;</span>);<br><br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        object[] SRArgs = &#123; RPNum &#125;;<br>        SRClass.<span class="hljs-built_in">InvokeMethod</span>(<span class="hljs-string">&quot;Restore&quot;</span>, SRArgs);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">catch</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-Win32-API-启用特定分区-以-C-分区为例-的系统还原"><a href="#使用-Win32-API-启用特定分区-以-C-分区为例-的系统还原" class="headerlink" title="使用 Win32 API 启用特定分区 (以 C 分区为例) 的系统还原"></a>使用 Win32 API 启用特定分区 (以 C 分区为例) 的系统还原</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Runtime.InteropServices;<br><br><span class="hljs-keyword">namespace</span> SRTest<br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span></span><br><span class="hljs-class">        &#123;</span><br>                [<span class="hljs-built_in">DllImport</span>(<span class="hljs-string">&quot;SrClient.dll&quot;</span>)]<br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">EnableSR</span><span class="hljs-params">([MarshalAs(UnmanagedType.LPWStr)]string Drive)</span></span>;<br>        <br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span><span class="hljs-params">(string[] args)</span></span><br><span class="hljs-function">                </span>&#123;                        <br>                        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">Write</span>(<span class="hljs-built_in">EnableSR</span>(<span class="hljs-string">&quot;C:\\&quot;</span>));<br>                                                <br>                        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">Write</span>(<span class="hljs-string">&quot;Press any key to continue . . . &quot;</span>);<br>                        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">ReadKey</span>(<span class="hljs-literal">true</span>);<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-Win32-API-禁用特定分区-以-C-分区为例-的系统还原"><a href="#使用-Win32-API-禁用特定分区-以-C-分区为例-的系统还原" class="headerlink" title="使用 Win32 API 禁用特定分区 (以 C 分区为例) 的系统还原"></a>使用 Win32 API 禁用特定分区 (以 C 分区为例) 的系统还原</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Runtime.InteropServices;<br><br><span class="hljs-keyword">namespace</span> SRTest<br>&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span></span><br><span class="hljs-class">        &#123;</span><br>                [<span class="hljs-built_in">DllImport</span>(<span class="hljs-string">&quot;SrClient.dll&quot;</span>)]<br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">DisableSR</span><span class="hljs-params">([MarshalAs(UnmanagedType.LPWStr)]string Drive)</span></span>;      <br>        <br>                <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span><span class="hljs-params">(string[] args)</span></span><br><span class="hljs-function">                </span>&#123;                        <br>                        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">Write</span>(<span class="hljs-built_in">DisableSR</span>(<span class="hljs-string">&quot;C:\\&quot;</span>));<br>                                                <br>                        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">Write</span>(<span class="hljs-string">&quot;Press any key to continue . . . &quot;</span>);<br>                        <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">ReadKey</span>(<span class="hljs-literal">true</span>);<br>                &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://bbs.pcbeta.com/viewthread-1507617-1-1.html">Windows系统还原新探（Windows系统还原的较深入研究）</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><ul><li><a href="/zh/2021/11/14/The-usage-of-System-Restore/" title="系统还原的使用方法">系统还原的使用方法</a></li><li><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>系统还原</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>系统还原</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>系统还原的使用方法</title>
    <link href="/zh/2021/11/14/The-usage-of-System-Restore/"/>
    <url>/zh/2021/11/14/The-usage-of-System-Restore/</url>
    
    <content type="html"><![CDATA[<p>从 Windows Me 开始，微软在 Windows 操作系统中添加了系统还原功能。由于该功能相当占用空间而且并不如其他快照类工具实用，于是成为一个冷门的鸡肋功能。这个工具出了也有二十多年了，而且微软也进行了诸多改进，譬如从 Windows Vista 开始系统还原的底层实现从过滤驱动改为卷影复制，Windows 8 开始系统还原最小创建间隔。但是这个功能知道的人却不多，即使知道的人也大概率会选择禁用该功能。但是我却不大建议禁用系统还原，毕竟在诸如系统补丁安装失败的情况下还是能派上些用场的。</p><p>为了让人们能更好的驾驭系统还原功能，我写下了这篇文章。</p><h2 id="图形界面"><a href="#图形界面" class="headerlink" title="图形界面"></a>图形界面</h2><p>本节教程描述以 Windows 11 为例子。</p><p>要想进入系统保护的设置页面，大致步骤为 <code>开始</code> -&gt; <code>所有应用</code> -&gt; <code>设置</code> -&gt; <code>系统</code> -&gt; <code>关于</code> -&gt; <code>系统保护</code>，详情可以参考下面的图片。</p><p><img src="GuiUsageStep1.png" alt="开始菜单"></p><p><img src="GuiUsageStep2.png" alt="系统页面"></p><p><img src="GuiUsageStep3.png" alt="关于页面"></p><p><img src="GuiUsageStep4.png" alt="系统保护设置页面"></p><p>读者可以在打开的系统保护设置页面中创建还原点、启用或禁用系统还原、管理磁盘空间占用和将系统恢复到某个还原点。这个简明易懂的界面对于大部分用户来说已经够用了，然而这部分由于并不是本文的重点，于是需要读者自行去探索。</p><h2 id="命令行和脚本"><a href="#命令行和脚本" class="headerlink" title="命令行和脚本"></a>命令行和脚本</h2><p>本节提到的命令和脚本均需读者以管理员身份运行的命令提示符下运行。</p><h3 id="通过-WMI-查看系统还原点信息"><a href="#通过-WMI-查看系统还原点信息" class="headerlink" title="通过 WMI 查看系统还原点信息"></a>通过 WMI 查看系统还原点信息</h3><blockquote><p>PowerShell -NoLogo -NoProfile -NonInteractive -InputFormat None -ExecutionPolicy Bypass Get-WmiObject -Class SystemRestore -Namespace Root\Default</p></blockquote><p>示例结果</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">CreationTime   Description    SequenceNumber    EventType RestorePointType<br><span class="hljs-params">------------</span>   <span class="hljs-params">-----------</span>    <span class="hljs-params">--------------</span>    <span class="hljs-params">---------</span> <span class="hljs-params">----------------</span><br>2021/11/9 3<span class="hljs-function">:20</span><span class="hljs-function">:36</span>      由毛利优化插件系统还原点清<span class="hljs-string">...</span>  46BEGIN_SYSTEM_C.<span class="hljs-string">..</span> 16<br>2021/11/11 0<span class="hljs-function">:47</span><span class="hljs-function">:32</span>     Windows 模块安装程序   47BEGIN_SYSTEM_C.<span class="hljs-string">..</span> APPLICATION_INSTALL<br>2021/11/11 3<span class="hljs-function">:20</span><span class="hljs-function">:46</span>     Installed VMware Workstation   48BEGIN_SYSTEM_C.<span class="hljs-string">..</span> APPLICATION_INSTALL<br></code></pre></td></tr></table></figure><h3 id="通过-vssadmin-工具查看系统还原的空间占用情况"><a href="#通过-vssadmin-工具查看系统还原的空间占用情况" class="headerlink" title="通过 vssadmin 工具查看系统还原的空间占用情况"></a>通过 vssadmin 工具查看系统还原的空间占用情况</h3><blockquote><p>vssadmin List ShadowStorage</p></blockquote><p>示例结果</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">vssadmin 1.1 - 卷影复制服务管理命令行工具<br>(C) 版权所有 2001<span class="hljs-string">-2013</span> Microsoft Corp.<br><br>卷影副本存储关联<br>   卷: (C:)\\?\Volume&#123;f4e7e09e<span class="hljs-string">-9</span>b7d<span class="hljs-string">-4</span>a8c<span class="hljs-string">-883</span>f<span class="hljs-string">-0798</span>a171916a&#125;\<br>   卷影副本存储卷: (C:)\\?\Volume&#123;f4e7e09e<span class="hljs-string">-9</span>b7d<span class="hljs-string">-4</span>a8c<span class="hljs-string">-883</span>f<span class="hljs-string">-0798</span>a171916a&#125;\<br>   已用卷影副本存储空间: 20.2 GB (1%)<br>   分配的卷影副本存储空间: 20.6 GB (1%)<br>   最大卷影副本存储空间: 38.1 GB (1%)<br></code></pre></td></tr></table></figure><h3 id="通过-vssadmin-工具清理系统还原点"><a href="#通过-vssadmin-工具清理系统还原点" class="headerlink" title="通过 vssadmin 工具清理系统还原点"></a>通过 vssadmin 工具清理系统还原点</h3><ul><li>删除特定分区 (以 C 分区为例) 中的所有还原点<blockquote><p>vssadmin Delete Shadows /For=C: /All /Quiet</p></blockquote></li><li>删除所有分区的所有还原点<blockquote><p>vssadmin Delete Shadows /All /Quiet</p></blockquote></li><li>删除特定分区 (以 C 分区为例) 中的除最近的还原点之外的所有还原点<blockquote><p>vssadmin Delete Shadows /For=C: /Oldest /Quiet</p></blockquote></li><li>删除所有分区中的除最近的还原点之外的所有还原点<blockquote><p>vssadmin Delete Shadows /Oldest /Quiet</p></blockquote></li></ul><h3 id="通过-vssadmin-工具调整系统还原磁盘空间占比"><a href="#通过-vssadmin-工具调整系统还原磁盘空间占比" class="headerlink" title="通过 vssadmin 工具调整系统还原磁盘空间占比"></a>通过 vssadmin 工具调整系统还原磁盘空间占比</h3><p>以下是调整系统还原磁盘空间占比的命令行操作方法和对应的说明。</p><blockquote><p>vssadmin Resize ShadowStorage /For=ForVolumeSpec /On=OnVolumeSpec /MaxSize=MaxSizeSpec</p></blockquote><p>用于重新调整 ForVolumeSpec 和 OnVolumeSpec 之间的卷影副本存储关联的最大值。重新调整存储关联会导致卷影副本消失。当某些卷影副本被删除时，卷影副本存储空间会压缩。如果将 MaxSizeSpec 指定为值 UNBOUNDED，卷影副本存储空间将没有限制。可以以字节为单位或 ForVolumeSpec 存储卷的百分比形式指定 MaxSizeSpec。对于字节级别指定，MaxSizeSpec 必须是 320MB 或更大，并接受以下后缀: KB、MB、GB、TB、PB 和 EB。另外 B、K、M、G、T、P 和 E 是可以接受的后缀。若要指定 MaxSizeSpec的百分比，请使用 % 字符作为数值的后缀。如果没有提供后缀，MaxSizeSpec 单位是字节。</p><p>为了更好的让用户理解上述说明，以下是对应的命令示例。</p><blockquote><p>vssadmin Resize ShadowStorage /For=C: /On=D: /MaxSize=900MB</p></blockquote><blockquote><p>vssadmin Resize ShadowStorage /For=C: /On=D: /MaxSize=UNBOUNDED</p></blockquote><blockquote><p>vssadmin Resize ShadowStorage /For=C: /On=C: /MaxSize=20%</p></blockquote><h3 id="通过-PowerShell-操作系统还原"><a href="#通过-PowerShell-操作系统还原" class="headerlink" title="通过 PowerShell 操作系统还原"></a>通过 PowerShell 操作系统还原</h3><p>由于我并不经常使用 PowerShell，于是仅提供相关用法的微软文档参考。</p><ul><li>创建还原点 (Checkpoint-Computer)请参阅 <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/checkpoint-computer%E3%80%82">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/checkpoint-computer。</a></li><li>恢复到特定还原点 (Restore-Computer)请参阅 <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/restore-computer%E3%80%82">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/restore-computer。</a></li><li>启用特定分区的系统还原 (Enable-ComputerRestore)请参阅 <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/enable-computerrestore%E3%80%82">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/enable-computerrestore。</a></li><li>禁用特定分区的系统还原 (Disable-ComputerRestore)请参阅 <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/disable-computerrestore%E3%80%82">https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/disable-computerrestore。</a></li></ul><h3 id="通过-mshta-调用-WMI-操作系统还原"><a href="#通过-mshta-调用-WMI-操作系统还原" class="headerlink" title="通过 mshta 调用 WMI 操作系统还原"></a>通过 mshta 调用 WMI 操作系统还原</h3><ul><li>创建系统还原点<blockquote><p>mshta vbscript:getobject(“winmgmts:\.\root\default:Systemrestore”).createrestorepoint(“系统还原点”,0,100)(window.close)</p></blockquote></li><li>启用系统还原<blockquote><p>mshta vbscript:getobject(“winmgmts:\.\root\default:Systemrestore”).Enable(“分区，譬如 C:，如果相对所有分区进行操作请留空”)(window.close)</p></blockquote></li><li>禁用系统还原<blockquote><p>mshta vbscript:getobject(“winmgmts:\.\root\default:Systemrestore”).Disable(“分区，譬如 C:，如果相对所有分区进行操作请留空”)(window.close)</p></blockquote></li></ul><h3 id="通过-VBScript-调用-WMI-操作系统还原"><a href="#通过-VBScript-调用-WMI-操作系统还原" class="headerlink" title="通过 VBScript 调用 WMI 操作系统还原"></a>通过 VBScript 调用 WMI 操作系统还原</h3><ul><li>创建系统还原点<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getobject</span><span class="hljs-params">(<span class="hljs-string">&quot;winmgmts:\\.\root\default:Systemrestore&quot;</span>)</span></span><span class="hljs-selector-class">.createrestorepoint</span>(<span class="hljs-string">&quot;系统还原点&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-number">100</span>)<br></code></pre></td></tr></table></figure></li><li>开启系统还原<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getobject</span><span class="hljs-params">(<span class="hljs-string">&quot;winmgmts:\\.\root\default:Systemrestore&quot;</span>)</span></span><span class="hljs-selector-class">.Enable</span>(<span class="hljs-string">&quot;分区，譬如 C:，如果相对所有分区进行操作请留空&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>关闭系统还原<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">getobject</span><span class="hljs-params">(<span class="hljs-string">&quot;winmgmts:\\.\root\default:Systemrestore&quot;</span>)</span></span><span class="hljs-selector-class">.Disable</span>(<span class="hljs-string">&quot;分区，譬如 C:，如果相对所有分区进行操作请留空&quot;</span>)<br></code></pre></td></tr></table></figure></li><li>获取还原点的序号<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Set RPSet = GetObject(<span class="hljs-string">&quot;winmgmts:root/default&quot;</span>)<span class="hljs-selector-class">.InstancesOf</span> (<span class="hljs-string">&quot;SystemRestore&quot;</span>)<br><span class="hljs-keyword">for</span> each RP <span class="hljs-keyword">in</span> RPSet<br>    wscript<span class="hljs-selector-class">.Echo</span> <span class="hljs-string">&quot;还原点序号： &quot;</span> &amp; RP<span class="hljs-selector-class">.SequenceNumber</span> &amp; <span class="hljs-string">&quot;, 还原点名称： &quot;</span> &amp; RP<span class="hljs-selector-class">.Description</span> &amp; <span class="hljs-string">&quot;, 还原点类型： &quot;</span>, RP<span class="hljs-selector-class">.RestorePointType</span> &amp; <span class="hljs-string">&quot;, 创建时间： &quot;</span> &amp; RP<span class="hljs-selector-class">.CreationTime</span><br>next<br></code></pre></td></tr></table></figure></li><li>执行系统还原<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">Set</span> obj <span class="hljs-comment">= GetObject(</span><span class="hljs-comment">&quot;winmgmts:&#123;impersonationLevel=impersonate&#125;!root/default:SystemRestore&quot;</span><span class="hljs-comment">)</span><br>if <span class="hljs-comment">obj.Restore(</span>还原点的序号<span class="hljs-comment">) &lt;&gt; 0 Then</span><br>    wscript.Echo <span class="hljs-comment">&quot;Restore failed&quot;</span><br>End <span class="hljs-comment">If</span><br><span class="hljs-keyword">Set</span> <span class="hljs-comment">OpSysSet = GetObject(</span><span class="hljs-comment">&quot;winmgmts:&#123;(Shutdown)&#125;//./root/cimv2&quot;</span><span class="hljs-comment">).ExecQuery(</span><span class="hljs-comment">&quot;select * from Win32_OperatingSystem where Primary=true&quot;</span><span class="hljs-comment">)</span><br>for <span class="hljs-comment">each OpSys in OpSysSet</span><br>    OpSys.Reboot()<br>next<br></code></pre></td></tr></table></figure></li></ul><h2 id="使用-C-操作系统还原"><a href="#使用-C-操作系统还原" class="headerlink" title="使用 C# 操作系统还原"></a>使用 C# 操作系统还原</h2><p>请参阅 <a href="/zh/2021/11/14/Using-System-Restore-with-CSharp/" title="通过 C# 使用系统还原">通过 C# 使用系统还原</a>。</p><h2 id="使用-C-操作系统还原-1"><a href="#使用-C-操作系统还原-1" class="headerlink" title="使用 C++ 操作系统还原"></a>使用 C++ 操作系统还原</h2><p>请参阅 <a href="/zh/2021/11/14/Using-System-Restore-with-Cpp/" title="通过 C++ 使用系统还原">通过 C++ 使用系统还原</a>。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://bbs.pcbeta.com/viewthread-1507617-1-1.html">Windows系统还原新探（Windows系统还原的较深入研究）</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>系统还原</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>系统还原</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 MSVC 工具链进行并行编译的技巧</title>
    <link href="/zh/2021/11/14/Tricks-for-parallel-compilation-with-MSVC-toolchain/"/>
    <url>/zh/2021/11/14/Tricks-for-parallel-compilation-with-MSVC-toolchain/</url>
    
    <content type="html"><![CDATA[<p>昨天和 vczh 在群内聊了下 MSVC 并行编译的事情，我本为验证他的说法，结果发现自己的配置缺少部分内容而无法充分并行编译。虽然在自己的工具链已经做了相关补充，但为了让包括自己在内的更多人能有一个靠谱的参考，于是写下本文。</p><p>MSVC 工具链一般情况下使用 MSBuild 工具来生成解决方案和项目，为 MSBuild 开启并行则可以同时生成多个项目，为 MSVC 编译器开启并行则可以同时生成多个编译单元。</p><p>Visual Studio 使用MSBuild.exe工具来生成解决方案和项目。 MSBuild.exe 工具的 /maxcpucount：number (或 /m：number) 命令行选项可以同时生成多个项目。 /MP 编译器选项可以同时生成多个编译单元。 如果它适用于你的应用程序，可以使用 /MP 和/或 /maxcpucount 缩短解决方案生成时间。</p><h2 id="为-C-C-编译器开启并行"><a href="#为-C-C-编译器开启并行" class="headerlink" title="为 C/C++ 编译器开启并行"></a>为 C/C++ 编译器开启并行</h2><p>为 C/C++ 编译器开启并行支持，使得 MSBuild 在编译单个目标的时候也能尽可能并行。开启方式有以下几种：</p><ul><li>在你想要修改的目标的编译器命令行选项中加入 <code>/MP</code> 参数。可参阅：<a href="https://docs.microsoft.com/en-us/cpp/build/reference/mp-build-with-multiple-processes">https://docs.microsoft.com/en-us/cpp/build/reference/mp-build-with-multiple-processes</a></li><li>在 Visual Studio 项目属性你想要修改的目标的 <code>C/C++</code> 的 <code>常规</code> 页中启用 <code>多处理器编译</code> 项。<img src="EnableParallelForCompiler.png" alt="启用方式"></li><li>打开 vcxproj 文件，在你想要修改的目标的 <code>ClCompile</code> 节点中加入 <code>MultiProcessorCompilation</code>并把值设为 <code>true</code> 后并保存。示例：<a href="https://github.com/ProjectMile/Mile.Cpp/blob/efcd4ec99eede1698d5d6fc05347cc1598987ad8/Mile.Cpp/Mile.Project/Mile.Project.props#L119">https://github.com/ProjectMile/Mile.Cpp/blob/efcd4ec99eede1698d5d6fc05347cc1598987ad8/Mile.Cpp/Mile.Project/Mile.Project.props#L119</a></li></ul><h2 id="为-MSBuild-开启并行"><a href="#为-MSBuild-开启并行" class="headerlink" title="为 MSBuild 开启并行"></a>为 MSBuild 开启并行</h2><p>由于直接用 MSBuild 命令行编译自己的解决方案只能生成单个目标（一般来说是 x86 Debug 目标）下的全部项目，而 Windows 下的项目一般需要支持多个目标（一般来说是 Debug 和 Release 配置下的 x86, x64, arm64 目标），于是需要写一个 prop 配置文件来实现一次性编译自己想要的全部目标，prop 文件参考如下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Project</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">DefaultTargets</span>=<span class="hljs-string">&quot;Restore;Build&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">PropertyGroup</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">SolutionPath</span>&gt;</span>$(MSBuildThisFileDirectory)*.sln<span class="hljs-tag">&lt;/<span class="hljs-name">SolutionPath</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">PropertyGroup</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ItemGroup</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ProjectReference</span> <span class="hljs-attr">Include</span>=<span class="hljs-string">&quot;$(SolutionPath)&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">AdditionalProperties</span>&gt;</span>Configuration=Debug;Platform=x86<span class="hljs-tag">&lt;/<span class="hljs-name">AdditionalProperties</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ProjectReference</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ProjectReference</span> <span class="hljs-attr">Include</span>=<span class="hljs-string">&quot;$(SolutionPath)&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">AdditionalProperties</span>&gt;</span>Configuration=Release;Platform=x86<span class="hljs-tag">&lt;/<span class="hljs-name">AdditionalProperties</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ProjectReference</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ProjectReference</span> <span class="hljs-attr">Include</span>=<span class="hljs-string">&quot;$(SolutionPath)&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">AdditionalProperties</span>&gt;</span>Configuration=Debug;Platform=x64<span class="hljs-tag">&lt;/<span class="hljs-name">AdditionalProperties</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ProjectReference</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ProjectReference</span> <span class="hljs-attr">Include</span>=<span class="hljs-string">&quot;$(SolutionPath)&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">AdditionalProperties</span>&gt;</span>Configuration=Release;Platform=x64<span class="hljs-tag">&lt;/<span class="hljs-name">AdditionalProperties</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ProjectReference</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ProjectReference</span> <span class="hljs-attr">Include</span>=<span class="hljs-string">&quot;$(SolutionPath)&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">AdditionalProperties</span>&gt;</span>Configuration=Debug;Platform=ARM64<span class="hljs-tag">&lt;/<span class="hljs-name">AdditionalProperties</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ProjectReference</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ProjectReference</span> <span class="hljs-attr">Include</span>=<span class="hljs-string">&quot;$(SolutionPath)&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">AdditionalProperties</span>&gt;</span>Configuration=Release;Platform=ARM64<span class="hljs-tag">&lt;/<span class="hljs-name">AdditionalProperties</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ProjectReference</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">ItemGroup</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Target</span> <span class="hljs-attr">Name</span>=<span class="hljs-string">&quot;Restore&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">MSBuild</span></span><br><span class="hljs-tag">      <span class="hljs-attr">Projects</span>=<span class="hljs-string">&quot;@(ProjectReference)&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">Targets</span>=<span class="hljs-string">&quot;Restore&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">StopOnFirstFailure</span>=<span class="hljs-string">&quot;True&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">Properties</span>=<span class="hljs-string">&quot;PreferredToolArchitecture=x64&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Target</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Target</span> <span class="hljs-attr">Name</span>=<span class="hljs-string">&quot;Build&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">MSBuild</span></span><br><span class="hljs-tag">      <span class="hljs-attr">Projects</span>=<span class="hljs-string">&quot;@(ProjectReference)&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">Targets</span>=<span class="hljs-string">&quot;Build&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">BuildInParallel</span>=<span class="hljs-string">&quot;True&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">StopOnFirstFailure</span>=<span class="hljs-string">&quot;True&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">Properties</span>=<span class="hljs-string">&quot;PreferredToolArchitecture=x64&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Target</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Target</span> <span class="hljs-attr">Name</span>=<span class="hljs-string">&quot;Rebuild&quot;</span> &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">MSBuild</span></span><br><span class="hljs-tag">      <span class="hljs-attr">Projects</span>=<span class="hljs-string">&quot;@(ProjectReference)&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">Targets</span>=<span class="hljs-string">&quot;Rebuild&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">BuildInParallel</span>=<span class="hljs-string">&quot;True&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">StopOnFirstFailure</span>=<span class="hljs-string">&quot;True&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">Properties</span>=<span class="hljs-string">&quot;PreferredToolArchitecture=x64&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后使用 MSBuild 命令行加上 <code>-m</code> 参数编译你写好的 prop 配置文件就可以使 MSBuild 真正的并行起来了。</p><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>开发环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Autoware.Auto 和 Windows 11 进行自动驾驶开发</title>
    <link href="/zh/2021/11/08/Develop-autonomous-driving-stack-with-Autoware-Auto-and-Windows-11/"/>
    <url>/zh/2021/11/08/Develop-autonomous-driving-stack-with-Autoware-Auto-and-Windows-11/</url>
    
    <content type="html"><![CDATA[<p>去年夏天，当微软宣布 WSL 会添加 GPU 计算与 GUI 应用支持的时候，这件事让我兴奋了好几天。因为当下一个 Windows 大版本可用的时候，我就可以捣鼓一个可以完全在 Windows 下运行的自动驾驶平台，然后就可以对我所在的实验室的老师展示一波，毕竟他还是想把实验室的自动驾驶平台搞一个用于教育用途的版本，而完全在 Windows 下运行切实的降低了志愿从事自动驾驶相关开发的开发者的入门门槛。</p><p>然而现实是骨感的，不仅下一个 Windows 大版本难产，而且我也因为诸如办公室政治这样的因素而离开了实验室而留下了遗憾。直到一年半后的今天，我在北京有了一份体面的工作，跳票了很久的下一个 Windows 大版本即 Windows 11 也终于发布了，我也想到了之前设想的事情，试了一下发现并不难，于是写下本文以供读者参考，顺便减少一些自己的遗憾。</p><h2 id="预备条件"><a href="#预备条件" class="headerlink" title="预备条件"></a>预备条件</h2><ul><li>满足 Windows 11 最低硬件要求</li><li>支持启用硬件虚拟化</li><li>至少有 8GB 的物理内存</li><li>最好有 Pascal 或之后架构的 Nvidia GPU 且安装了最新驱动 </li></ul><h2 id="安装-WSL-组件"><a href="#安装-WSL-组件" class="headerlink" title="安装 WSL 组件"></a>安装 WSL 组件</h2><p>本步骤将会安装以下内容：</p><ul><li>虚拟机平台组件</li><li>WSL 子系统组件</li><li>WSL2 Linux 内核映像</li><li>WSLg 图形应用支持组件</li><li>Ubuntu 20.04 LTS 实例且启用 WSL2 模式</li></ul><p>虽然安装 WSL 的方式有很多，最简单的还是以管理员权限运行命令提示符，仅需输入以下命令即可启用安装上述内容。</p><blockquote><p>wsl –install -d Ubuntu-20.04</p></blockquote><p><img src="InstallWSL.png" alt="安装 WSL 组件"></p><p>当出现类似图中的结果，那么代表着 WSL 组件安装成功，重启你的机器后即可生效。</p><p><img src="FirstRunWSL.png" alt="第一次 Ubuntu 20.04 LTS 实例"></p><p>如果一切正常，重启后会自动启动 Ubuntu 20.04 LTS 实例并让你设置用户名和密码，按照步骤设置即可完成 WSL 组件安装。</p><h2 id="配置-Ubuntu-20-04-LTS-实例"><a href="#配置-Ubuntu-20-04-LTS-实例" class="headerlink" title="配置 Ubuntu 20.04 LTS 实例"></a>配置 Ubuntu 20.04 LTS 实例</h2><p>众所周知，在国内的网络环境下使用 Ubuntu 首先要修改软件源映像地址，本文以 TUNA 镜像源为例。</p><p>首先执行以下命令将 Ubuntu 默认软件源替换为 TUNA HTTP 镜像源。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo sed -i <span class="hljs-string">&quot;s/archive.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&quot;</span> <span class="hljs-regexp">/etc/</span>apt/sources.list<br>sudo sed -i <span class="hljs-string">&quot;s/security.ubuntu.com/mirrors.tuna.tsinghua.edu.cn/g&quot;</span> <span class="hljs-regexp">/etc/</span>apt/sources.list<br></code></pre></td></tr></table></figure><p>然后执行以下命令并按照提示更新 Ubuntu 已安装包。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> update<br>sudo apt-<span class="hljs-builtin-name">get</span> upgrade<br></code></pre></td></tr></table></figure><p>如果你希望软件源改为 HTTPS，则可以执行下述命令。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo sed -i <span class="hljs-string">&quot;s/http:/https:/g&quot;</span> <span class="hljs-regexp">/etc/</span>apt/sources.list<br>sudo apt-get update<br></code></pre></td></tr></table></figure><h2 id="在-Ubuntu-20-04-LTS-实例安装-ROS-2-Foxy"><a href="#在-Ubuntu-20-04-LTS-实例安装-ROS-2-Foxy" class="headerlink" title="在 Ubuntu 20.04 LTS 实例安装 ROS 2 Foxy"></a>在 Ubuntu 20.04 LTS 实例安装 ROS 2 Foxy</h2><p>首先输入下述命令设置并验证 locale 为 <code>en_US.UTF-8</code>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo locale-gen en_US en_US.UTF-8<br>sudo update-locale <span class="hljs-attribute">LC_ALL</span>=en_US.UTF-8 <span class="hljs-attribute">LANG</span>=en_US.UTF-8<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">LANG</span>=en_US.UTF-8<br>locale<br></code></pre></td></tr></table></figure><p>接着输入下述命令添加 ROS 2 Foxy 软件包源。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo apt-get install curl gnupg2 lsb-release<br>sudo curl -sSL https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/ros/</span>rosdistro<span class="hljs-regexp">/master/</span>ros.key  -o <span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/keyrings/</span>ros-archive-keyring.gpg<br>echo <span class="hljs-string">&quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://mirrors.tuna.tsinghua.edu.cn/ros2/ubuntu $(lsb_release -cs) main&quot;</span> | sudo tee <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>ros2.list &gt; <span class="hljs-regexp">/dev/</span>null<br>sudo apt-get update<br></code></pre></td></tr></table></figure><p>最后输入以下命令并按照提示安装完整版 ROS 2 Foxy 包。</p><blockquote><p>sudo apt-get install ros-foxy-desktop</p></blockquote><h2 id="在-Ubuntu-20-04-LTS-实例下载并编译-Autoware-Auto"><a href="#在-Ubuntu-20-04-LTS-实例下载并编译-Autoware-Auto" class="headerlink" title="在 Ubuntu 20.04 LTS 实例下载并编译 Autoware.Auto"></a>在 Ubuntu 20.04 LTS 实例下载并编译 Autoware.Auto</h2><p>首先输入以下命令并按照提示安装 Autoware.Auto 所需包。</p><blockquote><p>sudo apt-get install git cmake python3-rosdep python3-vcstool python3-colcon-common-extensions </p></blockquote><p>接着输入以下命令初始化 rosdep 环境。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs csharp">sudo rosdep <span class="hljs-keyword">init</span><br>rosdep update<br></code></pre></td></tr></table></figure><p>然后输入以下命令进入 ROS 2 Foxy 环境。</p><blockquote><p>source /opt/ros/foxy/setup.bash</p></blockquote><p>继续输入以下命令并按提示下载 Autoware.Auto 源代码和安装编译所需依赖。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">cd ~<br>git clone https:<span class="hljs-comment">//gitlab.com/autowarefoundation/autoware.auto/AutowareAuto.git</span><br>cd AutowareAuto<br>vcs import &lt; autoware<span class="hljs-selector-class">.auto</span>.<span class="hljs-variable">$ROS_DISTRO</span><span class="hljs-selector-class">.repos</span><br>export ROS_VERSION=<span class="hljs-number">2</span><br>rosdep install -y -<span class="hljs-selector-tag">i</span> --from-paths <span class="hljs-attribute">src</span><br></code></pre></td></tr></table></figure><p>最后输入以下命令编译 Autoware.Auto。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">export COLCON_DEFAULTS_FILE=<span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/AutowareAuto/</span>tools<span class="hljs-regexp">/ade_image/</span>colcon-defaults.yaml<br>colcon build<br></code></pre></td></tr></table></figure><p>当上述命令成功执行，即在 Windows 11 上成功配置 Autoware.Auto 环境。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇文章只是基本的讲述了如何在 Windows 11 上配置 Autoware.Auto 环境。</p><p>如果你需要在你的设备上进行仿真，还需要按照 Autoware.Auto 的教程去配置 SVL Simulator。</p><p>在每次重新编译 Autoware.Auto 的时候需要执行以下命令。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cd ~/AutowareAuto<br><span class="hljs-keyword">source</span> <span class="hljs-regexp">/opt/</span>ros<span class="hljs-regexp">/foxy/</span>setup.bash<br>export COLCON_DEFAULTS_FILE=<span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/AutowareAuto/</span>tools<span class="hljs-regexp">/ade_image/</span>colcon-defaults.yaml<br>colcon build<br></code></pre></td></tr></table></figure><p>在每次使用 Autoware.Auto 之前的需要执行以下命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/AutowareAuto<br><span class="hljs-built_in">source</span> install/setup.bash<br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://devblogs.microsoft.com/commandline/the-windows-subsystem-for-linux-build-2020-summary">The Windows Subsystem for Linux BUILD 2020 Summary</a></li><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install">Install WSL</a></li><li><a href="https://docs.ros.org/en/foxy/Installation/Ubuntu-Install-Debians.html">Installing ROS 2 via Debian Packages</a></li><li><a href="https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/installation-no-ade.html">Autoware.Auto - Installation w/o ADE</a></li><li><a href="https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/building.html">Autoware.Auto - Building</a></li><li><a href="https://autowarefoundation.gitlab.io/autoware.auto/AutowareAuto/rosbag-localization-howto.html">Autoware.Auto - Localization Demo using rosbag</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>开发环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用 Win32 API 启动 Windows 商店应用</title>
    <link href="/zh/2021/11/07/Launch-Windows-Store-App-via-Win32-API/"/>
    <url>/zh/2021/11/07/Launch-Windows-Store-App-via-Win32-API/</url>
    
    <content type="html"><![CDATA[<p>本文描述如何通过命令行和 Win32 API 启动一个商店应用。</p><h2 id="获取-Windows-商店应用启动入口"><a href="#获取-Windows-商店应用启动入口" class="headerlink" title="获取 Windows 商店应用启动入口"></a>获取 Windows 商店应用启动入口</h2><p>首先在 PowerShell 下粘贴以下命令获取你机器里可以使用 Windows 商店应用启动入口。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$installedapps</span> = <span class="hljs-built_in">get-AppxPackage</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$app</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$installedapps</span>)<br>&#123;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$id</span> <span class="hljs-keyword">in</span> (<span class="hljs-built_in">Get-AppxPackageManifest</span> <span class="hljs-variable">$app</span>).package.applications.application.id)<br>    &#123;<br>        <span class="hljs-variable">$app</span>.packagefamilyname + <span class="hljs-string">&quot;!&quot;</span> + <span class="hljs-variable">$id</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在我的 Windows 11 机器中调用该脚本脚本返回的可用 Windows 商店应用启动入口如下。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Microsoft</span>.XboxGameOverlay_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.XboxSpeechToTextOverlay_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.Xbox.TCUI_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!Microsoft.Xbox.TCUI<br><span class="hljs-attribute">Microsoft</span>.XboxApp_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!Microsoft.XboxApp<br><span class="hljs-attribute">Microsoft</span>.WindowsSoundRecorder_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.People_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!x<span class="hljs-number">4</span>c<span class="hljs-number">7</span>a<span class="hljs-number">3</span>b<span class="hljs-number">7</span>dy<span class="hljs-number">2188</span>y<span class="hljs-number">46</span>d<span class="hljs-number">4</span>ya<span class="hljs-number">362</span>y<span class="hljs-number">19</span>ac<span class="hljs-number">5</span>a<span class="hljs-number">5805</span>e<span class="hljs-number">5</span>x<br><span class="hljs-attribute">Microsoft</span>.MicrosoftStickyNotes_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.MixedReality.Portal_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">RivetNetworks</span>.KillerControlCenter_rh<span class="hljs-number">07</span>ty<span class="hljs-number">8</span>m<span class="hljs-number">5</span>nkag!RivetNetworks.KillerControlCenter<br><span class="hljs-attribute">RealtekSemiconductorCorp</span>.RealtekAudioControl_dt<span class="hljs-number">26</span>b<span class="hljs-number">99</span>r<span class="hljs-number">8</span>h<span class="hljs-number">8</span>gj!App<br><span class="hljs-attribute">Microsoft</span>.MicrosoftOfficeHub_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!Microsoft.MicrosoftOfficeHub<br><span class="hljs-attribute">Microsoft</span>.MicrosoftOfficeHub_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!LocalBridge<br><span class="hljs-attribute">Microsoft</span>.MicrosoftOfficeHub_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!OfficeHubHWA<br><span class="hljs-attribute">AppUp</span>.IntelGraphicsExperience_<span class="hljs-number">8</span>j<span class="hljs-number">3</span>eq<span class="hljs-number">9</span>eme<span class="hljs-number">6</span>ctt!App<br><span class="hljs-attribute">AppUp</span>.ThunderboltControlCenter_<span class="hljs-number">8</span>j<span class="hljs-number">3</span>eq<span class="hljs-number">9</span>eme<span class="hljs-number">6</span>ctt!App<br><span class="hljs-attribute">Microsoft</span>.XboxIdentityProvider_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!Microsoft.XboxIdentityProvider<br><span class="hljs-attribute">Microsoft</span>.WebMediaExtensions_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.BingWeather_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.GetHelp_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.WebpImageExtension_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.BioEnrollment_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.Windows.CloudExperienceHost_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.AAD.BrokerPlugin_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.Windows.OOBENetworkConnectionFlow_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.Windows.OOBENetworkCaptivePortal_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.Windows.StartMenuExperienceHost_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.Windows.ShellExperienceHost_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">windows</span>.immersivecontrolpanel_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!microsoft.windows.immersivecontrolpanel<br><span class="hljs-attribute">Microsoft</span>.Windows.Search_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!CortanaUI<br><span class="hljs-attribute">Microsoft</span>.Windows.Search_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!ShellFeedsUI<br><span class="hljs-attribute">Microsoft</span>.Windows.Search_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!FESearchUI<br><span class="hljs-attribute">Microsoft</span>.MicrosoftEdge_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!MicrosoftEdge<br><span class="hljs-attribute">Microsoft</span>.MicrosoftEdge_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!PdfReader<br><span class="hljs-attribute">Microsoft</span>.Windows.ContentDeliveryManager_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.SecHealthUI_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!SecHealthUI<br><span class="hljs-attribute">Microsoft</span>.Windows.CallingShellApp_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Microsoft.Windows.CallingShellApp<br><span class="hljs-attribute">Microsoft</span>.Windows.AssignedAccessLockApp_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.Windows.CapturePicker_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.Windows.Apprep.ChxApp_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.Windows.NarratorQuickStart_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.Win<span class="hljs-number">32</span>WebViewHost_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!DPI.PerMonitorAware<br><span class="hljs-attribute">Microsoft</span>.Win<span class="hljs-number">32</span>WebViewHost_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!DPI.SystemAware<br><span class="hljs-attribute">Microsoft</span>.Win<span class="hljs-number">32</span>WebViewHost_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!DPI.Unaware<br><span class="hljs-attribute">Microsoft</span>.Windows.ParentalControls_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">1527c705</span>-<span class="hljs-number">839</span>a-<span class="hljs-number">4832</span>-<span class="hljs-number">9118</span>-<span class="hljs-number">54</span>d<span class="hljs-number">4</span>Bd<span class="hljs-number">6</span>a<span class="hljs-number">0</span>c<span class="hljs-number">89</span>_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Microsoft.Windows.FilePicker<br><span class="hljs-attribute">Windows</span>.PrintDialog_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Microsoft.Windows.PrintDialog<br><span class="hljs-attribute">Windows</span>.CBSPreview_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Microsoft.Windows.CBSPreview<br><span class="hljs-attribute">NcsiUwpApp_8wekyb3d8bbwe</span>!App<br><span class="hljs-attribute">Microsoft</span>.XboxGameCallableUI_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Microsoft.XboxGameCallableUI<br><span class="hljs-attribute">Microsoft</span>.Windows.XGpuEjectDialog_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Microsoft.Windows.XGpuEjectDialog<br><span class="hljs-attribute">Microsoft</span>.Windows.SecureAssessmentBrowser_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.Windows.PinningConfirmationDialog_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.Windows.PeopleExperienceHost_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.PPIProjection_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Microsoft.PPIProjection<br><span class="hljs-attribute">Microsoft</span>.MicrosoftEdgeDevToolsClient_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.LockApp_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!WindowsDefaultLockScreen<br><span class="hljs-attribute">Microsoft</span>.ECApp_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.CredDialogHost_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.AsyncTextService_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.AccountsControl_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">F46D4000</span>-FD<span class="hljs-number">22</span>-<span class="hljs-number">4</span>DB<span class="hljs-number">4</span>-AC<span class="hljs-number">8</span>E-<span class="hljs-number">4</span>E<span class="hljs-number">1</span>DDDE<span class="hljs-number">828</span>FE_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">E2A4F912</span>-<span class="hljs-number">2574</span>-<span class="hljs-number">4</span>A<span class="hljs-number">75</span>-<span class="hljs-number">9</span>BB<span class="hljs-number">0</span>-<span class="hljs-number">0</span>D<span class="hljs-number">023378592</span>B_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Microsoft.Windows.AppResolverUX<br><span class="hljs-attribute">c5e2524a</span>-ea<span class="hljs-number">46</span>-<span class="hljs-number">4</span>f<span class="hljs-number">67</span>-<span class="hljs-number">841</span>f-<span class="hljs-number">6</span>a<span class="hljs-number">9465</span>d<span class="hljs-number">9</span>d<span class="hljs-number">515</span>_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.ZuneVideo_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!Microsoft.ZuneVideo<br><span class="hljs-attribute">Microsoft</span>.ZuneMusic_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!Microsoft.ZuneMusic<br><span class="hljs-attribute">Microsoft</span>.GamingApp_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!Microsoft.Xbox.App<br><span class="hljs-attribute">Microsoft</span>.BingNews_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!AppexNews<br><span class="hljs-attribute">Microsoft</span>.Getstarted_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.DesktopAppInstaller_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.DesktopAppInstaller_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!PythonRedirector<br><span class="hljs-attribute">Microsoft</span>.DesktopAppInstaller_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!winget<br><span class="hljs-attribute">Microsoft</span>.WindowsNotepad_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.WindowsMaps_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">MicrosoftTeams_8wekyb3d8bbwe</span>!MicrosoftTeams<br><span class="hljs-attribute">MicrosoftTeams_8wekyb3d8bbwe</span>!msteamsupdate<br><span class="hljs-attribute">Microsoft</span>.Paint_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.<span class="hljs-number">549981</span>C<span class="hljs-number">3</span>F<span class="hljs-number">5</span>F<span class="hljs-number">10</span>_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.LanguageExperiencePackzh-CN_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">40174MouriNaruto</span>.NanaZip_gnj<span class="hljs-number">4</span>mf<span class="hljs-number">6</span>z<span class="hljs-number">9</span>tkrc!NanaZipC<br><span class="hljs-attribute">40174MouriNaruto</span>.NanaZip_gnj<span class="hljs-number">4</span>mf<span class="hljs-number">6</span>z<span class="hljs-number">9</span>tkrc!NanaZipG<br><span class="hljs-attribute">40174MouriNaruto</span>.NanaZip_gnj<span class="hljs-number">4</span>mf<span class="hljs-number">6</span>z<span class="hljs-number">9</span>tkrc!NanaZip<br><span class="hljs-attribute">9426MICRO</span>-STARINTERNATION.MSICenter_kzh<span class="hljs-number">8</span>wxbdkxb<span class="hljs-number">8</span>p!App<br><span class="hljs-attribute">Microsoft</span>.HEIFImageExtension_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">NVIDIACorp</span>.NVIDIAControlPanel_<span class="hljs-number">56</span>jybvy<span class="hljs-number">8</span>sckqj!NVIDIACorp.NVIDIAControlPanel<br><span class="hljs-attribute">Microsoft</span>.VP<span class="hljs-number">9</span>VideoExtensions_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!PackageMetadata<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Global.Accounts<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Global.AppListBackup<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Global.FileExplorerExtensions<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Global.HardwareConfirmator<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Global.SnapLayout<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Global.SystemTray<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Global.Taskbar<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!InputApp<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Global.IrisService<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!ScreenClipping<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!MiniSearchUI<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!CortanaUI<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!FESearchUI<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Global.StartMenu<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Global.ValueBanner<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!WebExperienceHost<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Global.ExperienceExtensions<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.CBS_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!Global.WsxPackManager<br><span class="hljs-attribute">Microsoft</span>.PowerAutomateDesktop_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!PAD.Console<br><span class="hljs-attribute">Microsoft</span>.RemoteDesktop_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.ScreenSketch_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.StorePurchaseApp_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.WindowsTerminal_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.WindowsCamera_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.WindowsAlarms_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.WindowsCalculator_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.MicrosoftSolitaireCollection_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">microsoft</span>.windowscommunicationsapps_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!microsoft.windowslive.mail<br><span class="hljs-attribute">microsoft</span>.windowscommunicationsapps_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!microsoft.windowslive.calendar<br><span class="hljs-attribute">microsoft</span>.windowscommunicationsapps_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!microsoft.windowslive.manageaccounts<br><span class="hljs-attribute">Microsoft</span>.Todos_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.Windows.Photos_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.Windows.Photos_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!SecondaryEntry<br><span class="hljs-attribute">Microsoft</span>.WindowsFeedbackHub_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.WindowsStore_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.WebExperience_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!PackageMetadata<br><span class="hljs-attribute">MicrosoftWindows</span>.Client.WebExperience_cw<span class="hljs-number">5</span>n<span class="hljs-number">1</span>h<span class="hljs-number">2</span>txyewy!App<br><span class="hljs-attribute">Microsoft</span>.YourPhone_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.MicrosoftEdge.Stable_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br><span class="hljs-attribute">Microsoft</span>.OneDriveSync_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!OneDrive<br><span class="hljs-attribute">Microsoft</span>.XboxGamingOverlay_<span class="hljs-number">8</span>wekyb<span class="hljs-number">3</span>d<span class="hljs-number">8</span>bbwe!App<br></code></pre></td></tr></table></figure><h2 id="命令行用法"><a href="#命令行用法" class="headerlink" title="命令行用法"></a>命令行用法</h2><p>如果要通过命令行启动一个 Windows 商店应用，一般的做法是使用 <code>explorer.exe</code> 传入命令行参数进行使用。</p><blockquote><p>explorer.exe “shell:AppsFolder\你要启动的 Windows 商店应用入口”</p></blockquote><h2 id="Win32-API-用法"><a href="#Win32-API-用法" class="headerlink" title="Win32 API 用法"></a>Win32 API 用法</h2><p>通过 <code>IApplicationActivationManager</code> 接口你可以在你的应用程序中优雅的启动一个 Windows 商店应用，代码示例如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;shobjidl.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>HRESULT hr = ::<span class="hljs-built_in">CoInitializeEx</span>(<span class="hljs-literal">nullptr</span>, COINIT_APARTMENTTHREADED);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">SUCCEEDED</span>(hr))<br>&#123;<br>IApplicationActivationManager* pApplicationActivationManager = <span class="hljs-literal">nullptr</span>;<br>hr = ::<span class="hljs-built_in">CoCreateInstance</span>(<br>CLSID_ApplicationActivationManager,<br><span class="hljs-literal">nullptr</span>,<br>CLSCTX_LOCAL_SERVER,<br>IID_IApplicationActivationManager,<br>(LPVOID*)&amp;pApplicationActivationManager);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">SUCCEEDED</span>(hr))<br>&#123;<br><span class="hljs-comment">// This call ensures that the app is launched as the foreground window</span><br>hr = ::<span class="hljs-built_in">CoAllowSetForegroundWindow</span>(<br>pApplicationActivationManager, <br><span class="hljs-literal">nullptr</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">SUCCEEDED</span>(hr))<br>&#123;<br>DWORD dwProcessId = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// Launch the app</span><br>hr = pApplicationActivationManager-&gt;<span class="hljs-built_in">ActivateApplication</span>(<br><span class="hljs-string">L&quot;你要启动的 Windows 商店应用入口&quot;</span>,<br><span class="hljs-literal">nullptr</span>,<br>AO_NONE,<br>&amp;dwProcessId);<br>&#125;<br><br>pApplicationActivationManager-&gt;<span class="hljs-built_in">Release</span>();<br>&#125;<br><br>::<span class="hljs-built_in">CoUninitialize</span>();<br>&#125;<br><br>    <span class="hljs-keyword">return</span> hr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/shobjidl_core/nn-shobjidl_core-iapplicationactivationmanager">IApplicationActivationManager</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>用户模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>用户模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compact OS 的使用方法</title>
    <link href="/zh/2021/11/07/The-usage-of-Compact-OS/"/>
    <url>/zh/2021/11/07/The-usage-of-Compact-OS/</url>
    
    <content type="html"><![CDATA[<p>本文归纳并总结 Compact OS 的用法，本文适用于对 Compact OS 感兴趣的用户和开发者。</p><h2 id="支持的算法"><a href="#支持的算法" class="headerlink" title="支持的算法"></a>支持的算法</h2><table><thead><tr><th>算法</th><th>速度</th><th>效果（数据摘自Dism++设置对话框）</th><th>备注</th></tr></thead><tbody><tr><td>XPRESS4K</td><td>最快</td><td>大约节省33%的已用空间</td><td>默认压缩选项，与WIMBoot使用相同的算法</td></tr><tr><td>XPRESS8K</td><td></td><td>大约节省36%的已用空间</td><td></td></tr><tr><td>XPRESS16K</td><td></td><td>大约节省38%的已用空间</td><td></td></tr><tr><td>LZX</td><td>最慢</td><td>大约节省44%的已用空间</td><td>效果最好，与WIM最大压缩使用相同的算法</td></tr></tbody></table><h2 id="命令行用法"><a href="#命令行用法" class="headerlink" title="命令行用法"></a>命令行用法</h2><ul><li>使用 DISM 工具以 Compact OS 模式释放系统映像 (需要管理员权限)<blockquote><p>DISM /Apply-Image /ImageFile:”WIM或ESD映像路径” /Index:”映像号” /ApplyDir:”展开位置，例如D:&quot; /compact</p></blockquote></li><li>使用 compact 工具查询当前 Windows 映像实例的 Compact OS 状态 (需要管理员权限)<blockquote><p>compact /CompactOs:query</p></blockquote></li><li>使用 compact 工具启用当前 Windows 映像实例的 Compact OS 模式 (需要管理员权限)<blockquote><p>compact /CompactOs:always</p></blockquote></li><li>使用 compact 工具禁用当前 Windows 映像实例的 Compact OS 模式 (需要管理员权限)<blockquote><p>compact /CompactOs:never</p></blockquote></li><li>使用 compact 工具以默认压缩算法对单个文件进行 Compact OS 模式压缩<blockquote><p>compact /c /exe “文件路径”</p></blockquote></li><li>使用 compact 工具以其他可用算法对单个文件进行 Compact OS 模式压缩<blockquote><p>compact /c /exe:”算法名” “文件路径”</p></blockquote></li><li>使用 compact 工具对单个以 Compact OS 模式压缩的文件解压缩<blockquote><p>compact /u /exe “文件路径”</p></blockquote></li></ul><h2 id="Win32-API-用法"><a href="#Win32-API-用法" class="headerlink" title="Win32 API 用法"></a>Win32 API 用法</h2><p>虽然从 Windows 10 开始微软为开发者提供了文件名为 <code>Wofutil.dll</code> 的库用提供了对 WIMBoot 和 Compact OS 操作的简易包装。但是笔者却不建议开发者使用该库，首先相对于本文接下来要介绍的基于 <code>DeviceIoControl</code> 的用法而言在用法上并没有明显简化。而且 Compact OS 特性其实也是可以通过 Windows ADK 提供的 <code>wofadk.sys</code> 在 Windows 7 及之后的 Windows 操作系统中使用，而 <code>Wofutil.dll</code> 这个库只有 Windows 10 及之后的 Windows 版本才开始提供，如果你要写一个支持 Windows 旧版本的操作 Compact OS的应用，你依然还得有 <code>DeviceIoControl</code> API。</p><p>基于 <code>DeviceIoControl</code> API 用法其实并不复杂，Windows Overlay Filter 驱动在用户模式下提供了以下 I/O 控制码。</p><ul><li>FSCTL_SET_EXTERNAL_BACKING 为特定文件添加 WIMBoot 或 Compact OS 属性</li><li>FSCTL_GET_EXTERNAL_BACKING 获取特定文件的 WIMBoot 或 Compact OS 属性</li><li>FSCTL_DELETE_EXTERNAL_BACKING 移除特定文件的 WIMBoot 或 Compact OS 属性</li></ul><p>由于千言万语不如提供一个示例，于是我写了个简单的 C++ 示例以供参考。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span><br><br><span class="hljs-function">std::wstring <span class="hljs-title">GetMessageByID</span><span class="hljs-params">(DWORD MessageID)</span></span><br><span class="hljs-function"></span>&#123;<br>std::wstring MessageString;<br>LPWSTR pBuffer = <span class="hljs-literal">nullptr</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">FormatMessageW</span>(<br>FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,<br><span class="hljs-literal">nullptr</span>,<br>MessageID,<br><span class="hljs-built_in">MAKELANGID</span>(LANG_NEUTRAL, SUBLANG_DEFAULT),<br><span class="hljs-keyword">reinterpret_cast</span>&lt;LPTSTR&gt;(&amp;pBuffer),<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">nullptr</span>))<br>&#123;<br>MessageString = std::<span class="hljs-built_in">wstring</span>(pBuffer, <span class="hljs-built_in">wcslen</span>(pBuffer));<br><br><span class="hljs-built_in">LocalFree</span>(pBuffer);<br>&#125;<br><br><span class="hljs-keyword">return</span> MessageString;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">// 设置stl库的全局语言为系统当前语言以避免乱码</span><br>std::locale::<span class="hljs-built_in">global</span>(std::<span class="hljs-built_in">locale</span>(<span class="hljs-string">&quot;&quot;</span>));<br><br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;请输入文件路径：&quot;</span>;<br><br>std::wstring FileName;<br>std::wcin &gt;&gt; FileName;<br><br><span class="hljs-comment">// 打开文件并获取文件句柄（使用选项参考系统自带Compact命令行工具实现）</span><br>HANDLE hFile = <span class="hljs-built_in">CreateFileW</span>(<br>FileName.<span class="hljs-built_in">c_str</span>(),<br>FILE_LIST_DIRECTORY | FILE_READ_ATTRIBUTES,<br>FILE_SHARE_READ | FILE_SHARE_DELETE,<br><span class="hljs-literal">nullptr</span>,<br>OPEN_EXISTING,<br>FILE_FLAG_BACKUP_SEMANTICS | FILE_FLAG_SEQUENTIAL_SCAN,<br><span class="hljs-literal">nullptr</span>);<br><span class="hljs-keyword">if</span> (INVALID_HANDLE_VALUE != hFile)<br>&#123;<br><span class="hljs-comment">// 定义一个结构体把两个结构体合并起来以方便使用并定义变量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>WOF_EXTERNAL_INFO WofInfo;<br>FILE_PROVIDER_EXTERNAL_INFO FileProviderInfo;<br>&#125; WofCompactInfo = &#123; <span class="hljs-number">0</span> &#125;;<br><br><span class="hljs-comment">// 发送IO操作码以调用过滤驱动获取压缩状态</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">DeviceIoControl</span>(<br>hFile,<br>FSCTL_GET_EXTERNAL_BACKING,<br><span class="hljs-literal">nullptr</span>,<br><span class="hljs-number">0</span>,<br>&amp;WofCompactInfo,<br><span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(WofCompactInfo),<br><span class="hljs-literal">nullptr</span>,<br><span class="hljs-literal">nullptr</span>))<br>&#123;<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;压缩算法：&quot;</span>;<br><br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (WofCompactInfo.FileProviderInfo.Algorithm)<br>&#123;<br><span class="hljs-keyword">case</span> FILE_PROVIDER_COMPRESSION_XPRESS4K:<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;XPRESS4K&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FILE_PROVIDER_COMPRESSION_LZX:<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;LZX&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FILE_PROVIDER_COMPRESSION_XPRESS8K:<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;XPRESS8K&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FILE_PROVIDER_COMPRESSION_XPRESS16K:<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;XPRESS16K&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;未知&quot;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>std::wcout &lt;&lt; std::endl;<br><br><span class="hljs-keyword">wchar_t</span> Option = <span class="hljs-string">L&#x27;\0&#x27;</span>;<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;请问是否解压缩（y/n）：&quot;</span>;<br>std::wcin &gt;&gt; Option;<br><span class="hljs-keyword">if</span> (Option == <span class="hljs-string">L&#x27;y&#x27;</span>)<br>&#123;<br><span class="hljs-comment">// 发送IO操作码以调用过滤驱动执行解压缩操作</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">DeviceIoControl</span>(<br>hFile,<br>FSCTL_DELETE_EXTERNAL_BACKING,<br><span class="hljs-literal">nullptr</span>,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">nullptr</span>,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">nullptr</span>,<br><span class="hljs-literal">nullptr</span>))<br>&#123;<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;文件解压缩成功&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;DeviceIoControl FSCTL_DELETE_EXTERNAL_BACKING 调用出错，文件压缩失败&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;DeviceIoControl FSCTL_GET_EXTERNAL_BACKING 调用出错，文件可能未经CompactOS压缩或系统不是Windows 10且没有安装WofAdk驱动&quot;</span> &lt;&lt; std::endl;<br><br><span class="hljs-keyword">wchar_t</span> Option = <span class="hljs-string">L&#x27;\0&#x27;</span>;<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;请问是否使用LZX压缩算法压缩（y/n）：&quot;</span>;<br>std::wcin &gt;&gt; Option;<br><span class="hljs-keyword">if</span> (Option == <span class="hljs-string">L&#x27;y&#x27;</span>)<br>&#123;<br><span class="hljs-comment">// 指定过滤驱动版本，现阶段只有该选项</span><br>WofCompactInfo.WofInfo.Version = WOF_CURRENT_VERSION;<br><br><span class="hljs-comment">// 指定Provider版本，必须使用该选项</span><br>WofCompactInfo.WofInfo.Provider = WOF_PROVIDER_FILE;<br><br><span class="hljs-comment">// 指定Provider版本，现阶段只有该选项</span><br>WofCompactInfo.FileProviderInfo.Version = FILE_PROVIDER_CURRENT_VERSION;<br><br><span class="hljs-comment">// 指定选项，必须填0</span><br>WofCompactInfo.FileProviderInfo.Flags = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 指定压缩时使用的算法，选项如下</span><br><span class="hljs-comment">// FILE_PROVIDER_COMPRESSION_XPRESS4K</span><br><span class="hljs-comment">// FILE_PROVIDER_COMPRESSION_LZX</span><br><span class="hljs-comment">// FILE_PROVIDER_COMPRESSION_XPRESS8K</span><br><span class="hljs-comment">// FILE_PROVIDER_COMPRESSION_XPRESS16K</span><br>WofCompactInfo.FileProviderInfo.Algorithm = FILE_PROVIDER_COMPRESSION_XPRESS4K;<br><br><span class="hljs-comment">// 发送IO操作码以调用过滤驱动执行压缩操作</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">DeviceIoControl</span>(<br>hFile,<br>FSCTL_SET_EXTERNAL_BACKING,<br>&amp;WofCompactInfo,<br><span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(WofCompactInfo),<br><span class="hljs-literal">nullptr</span>,<br><span class="hljs-number">0</span>,<br><span class="hljs-literal">nullptr</span>,<br><span class="hljs-literal">nullptr</span>))<br>&#123;<br><span class="hljs-comment">// 发送IO操作码以调用过滤驱动获取压缩状态</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">DeviceIoControl</span>(<br>hFile,<br>FSCTL_GET_EXTERNAL_BACKING,<br><span class="hljs-literal">nullptr</span>,<br><span class="hljs-number">0</span>,<br>&amp;WofCompactInfo,<br><span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(WofCompactInfo),<br><span class="hljs-literal">nullptr</span>,<br><span class="hljs-literal">nullptr</span>))<br>&#123;<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;文件压缩成功，压缩算法：&quot;</span>;<br><br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (WofCompactInfo.FileProviderInfo.Algorithm)<br>&#123;<br><span class="hljs-keyword">case</span> FILE_PROVIDER_COMPRESSION_XPRESS4K:<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;XPRESS4K&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FILE_PROVIDER_COMPRESSION_LZX:<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;LZX&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FILE_PROVIDER_COMPRESSION_XPRESS8K:<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;XPRESS8K&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FILE_PROVIDER_COMPRESSION_XPRESS16K:<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;XPRESS16K&quot;</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;未知&quot;</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>std::wcout &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;DeviceIoControl FSCTL_GET_EXTERNAL_BACKING 调用出错&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;DeviceIoControl FSCTL_SET_EXTERNAL_BACKING 调用出错，文件压缩失败&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">CloseHandle</span>(hFile);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>std::wcout &lt;&lt; <span class="hljs-string">L&quot;CreateFileW 调用出错：&quot;</span> &lt;&lt; <span class="hljs-built_in">GetMessageByID</span>(<span class="hljs-built_in">GetLastError</span>());<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="移植到旧版-Windows"><a href="#移植到旧版-Windows" class="headerlink" title="移植到旧版 Windows"></a>移植到旧版 Windows</h2><p>你并没听错，Compact OS 功能是可以移植到旧版 Windows 的，因为 Windows ADK 下提供了 <code>wofadk.sys</code> 以让用户可以在旧版Windows 操作以 WIMBoot 和 Compact OS 模式压缩过的文件。</p><p>鉴于 DISM++ 和无忧启动论坛里的不少工具已经实现该特性且在旧版本 Windows 使用 Compact OS 也存在潜在的系统稳定性风险，于是以负责任的角度，本文不提供将 Compact OS 移植到旧版 Windows 的方法，但是会提一些旧版 Windows 使用 Compact OS 的潜在的问题。</p><p>首先 <code>wofadk.sys</code> 最低支持的 Windows 版本为 Windows 7，所以你并不能在 Windows 7 之前的 Windows 版本譬如 Windows Vista中使用 Compact OS。</p><p>其次 <code>wofadk.sys</code> 的实现存在问题，据 DISM++ 作者描述会在 Windows 7 和 Windows 8 下返回从 Windows 8.1 Update 1 才开始引入的结构体的内容，于是导致在 Windows 7 和 Windows 8 下启用 Compact OS 后系统会莫名其妙的出现蓝屏情况，于是将 Compact OS 移植到 Windows 8.1 Update 1 开始的 Windows 8.1 版本是稳妥之选。</p><p>在旧版 Windows 下由于其他可能不支持 Compact OS 的应用可能并不会以正确的方式处理，于是在旧版本 Windows 下使用Compact OS 还需要排除更多的文件。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.52pojie.cn/thread-528806-1-1.html">浅谈Windows10的CompactOS特性</a></li><li><a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/compact-os">Compact OS</a></li><li><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/compact">compact.exe</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/api/wofapi">Wofapi.h</a></li><li><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/fsctl-set-external-backing">FSCTL_SET_EXTERNAL_BACKING</a></li><li><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/fsctl-get-external-backing">FSCTL_GET_EXTERNAL_BACKING</a></li><li><a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ifs/fsctl-delete-external-backing">FSCTL_DELETE_EXTERNAL_BACKING</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><ul><li><a href="/zh/2021/11/06/The-history-and-principle-of-Compact-OS/" title="Compact OS 的历史和原理">Compact OS 的历史和原理</a></li><li><a href="/zh/2021/11/06/The-exclusion-list-of-Compact-OS/" title="Compact OS 的文件和目录排除列表">Compact OS 的文件和目录排除列表</a></li><li><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>Compact OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>Compact OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compact OS 的文件和目录排除列表</title>
    <link href="/zh/2021/11/06/The-exclusion-list-of-Compact-OS/"/>
    <url>/zh/2021/11/06/The-exclusion-list-of-Compact-OS/</url>
    
    <content type="html"><![CDATA[<p>虽然 Compact OS 是一个相当好用的功能，典型情况下可以让你的系统分区节省出 30% 的空间。但是并不是所有文件都能采用 Compact OS 进行压缩，于是需要排除掉不能使用 Compact OS 压缩的文件。</p><p>我从 Windows 10 中提取出了 Compact OS 默认的排除列表，希望能帮助需要开发基于 Compact OS 的第三方应用的朋友。由于 Windows 下使用 Compact OS 的途径主要是 DISM 和 compact 工具，于是本文贴出这两个工具使用的排除列表。顺便也贴出 NSudo 9.0 开始附带的毛利优化插件的排除列表。</p><h2 id="DISM-工具使用的排除列表"><a href="#DISM-工具使用的排除列表" class="headerlink" title="DISM 工具使用的排除列表"></a>DISM 工具使用的排除列表</h2><p>DISM 通过 Windows Imaging Library (wimgapi.dll) 来实现在映像展开过程中对文件进行 Compact OS 压缩，其采用的排除列表和 WIMBoot 一致，排除列表保存在 <code>WimBootCompress.ini</code> 中，一般情况下内容如下。</p><p>DISM 用的这套排除列表比较精细，但是自己实现起来比较麻烦。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">; This is the inbox configuration file used for deploying or capture a<br>; WIMBoot system. Please do not remove this file because WIMCaptureImage <br>; and WIMApplyImage will fail if WIM_FLAG_WIM_BOOT flag is specified.<br><br>[CompressionExclusionList]<br>ntoskrnl.exe<br><br>[PrepopulateList]<br>bootstat.dat<br>*winload.*<br>*winresume.*<br>wof.sys<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\C</span>onfig<span class="hljs-symbol">\S</span>YSTEM<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\P</span>latformManifest<span class="hljs-symbol">\*</span><br><br>[ExclusionList]<br><span class="hljs-symbol">\$</span>bootdrive$<br><span class="hljs-symbol">\$</span>dwnlvldrive$<br><span class="hljs-symbol">\$</span>lsdrive$<br><span class="hljs-symbol">\$</span>installdrive$<br><span class="hljs-symbol">\$</span>Recycle.Bin<span class="hljs-symbol">\*</span><br><span class="hljs-symbol">\b</span>ootsect.bak<br><span class="hljs-symbol">\h</span>iberfil.sys<br><span class="hljs-symbol">\p</span>agefile.sys<br><span class="hljs-symbol">\P</span>rogramData<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>QM<br><span class="hljs-symbol">\S</span>ystem Volume Information<br><span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\*</span><span class="hljs-symbol">\A</span>ppData<span class="hljs-symbol">\L</span>ocal<span class="hljs-symbol">\G</span>DIPFONTCACHEV1.DAT<br><span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\*</span><span class="hljs-symbol">\N</span>TUSER.DAT*.TM.blf<br><span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\*</span><span class="hljs-symbol">\N</span>TUSER.DAT*.regtrans-ms<br><span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\*</span><span class="hljs-symbol">\N</span>TUSER.DAT*.log*<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\A</span>ppCompat<span class="hljs-symbol">\P</span>rograms<span class="hljs-symbol">\A</span>mcache.hve*.TM.blf<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\A</span>ppCompat<span class="hljs-symbol">\P</span>rograms<span class="hljs-symbol">\A</span>mcache.hve*.regtrans-ms<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\A</span>ppCompat<span class="hljs-symbol">\P</span>rograms<span class="hljs-symbol">\A</span>mcache.hve*.log*<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\C</span>SC<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\D</span>ebug<span class="hljs-symbol">\*</span><br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\L</span>ogs<span class="hljs-symbol">\*</span><br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\P</span>anther<span class="hljs-symbol">\*</span>.etl<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\P</span>anther<span class="hljs-symbol">\*</span>.log<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\P</span>anther<span class="hljs-symbol">\F</span>astCleanup<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\P</span>anther<span class="hljs-symbol">\i</span>mg<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\P</span>anther<span class="hljs-symbol">\L</span>icenses<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\P</span>anther<span class="hljs-symbol">\M</span>igLog*.xml<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\P</span>anther<span class="hljs-symbol">\R</span>esources<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\P</span>anther<span class="hljs-symbol">\R</span>ollback<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\P</span>anther<span class="hljs-symbol">\S</span>etup*<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\P</span>anther<span class="hljs-symbol">\U</span>nattendGC<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\P</span>anther<span class="hljs-symbol">\u</span>pgradematrix<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\P</span>refetch<span class="hljs-symbol">\*</span><br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>erviceProfiles<span class="hljs-symbol">\L</span>ocalService<span class="hljs-symbol">\N</span>TUSER.DAT*.TM.blf<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>erviceProfiles<span class="hljs-symbol">\L</span>ocalService<span class="hljs-symbol">\N</span>TUSER.DAT*.regtrans-ms<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>erviceProfiles<span class="hljs-symbol">\L</span>ocalService<span class="hljs-symbol">\N</span>TUSER.DAT*.log*<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>erviceProfiles<span class="hljs-symbol">\N</span>etworkService<span class="hljs-symbol">\N</span>TUSER.DAT*.TM.blf<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>erviceProfiles<span class="hljs-symbol">\N</span>etworkService<span class="hljs-symbol">\N</span>TUSER.DAT*.regtrans-ms<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>erviceProfiles<span class="hljs-symbol">\N</span>etworkService<span class="hljs-symbol">\N</span>TUSER.DAT*.log*<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\c</span>onfig<span class="hljs-symbol">\R</span>egBack<span class="hljs-symbol">\*</span><br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\c</span>onfig<span class="hljs-symbol">\*</span>.TM.blf<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\c</span>onfig<span class="hljs-symbol">\*</span>.regtrans-ms<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\c</span>onfig<span class="hljs-symbol">\*</span>.log*<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\S</span>MI<span class="hljs-symbol">\S</span>tore<span class="hljs-symbol">\M</span>achine<span class="hljs-symbol">\S</span>CHEMA.DAT*.TM.blf<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\S</span>MI<span class="hljs-symbol">\S</span>tore<span class="hljs-symbol">\M</span>achine<span class="hljs-symbol">\S</span>CHEMA.DAT*.regtrans-ms<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\S</span>MI<span class="hljs-symbol">\S</span>tore<span class="hljs-symbol">\M</span>achine<span class="hljs-symbol">\S</span>CHEMA.DAT*.log*<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\s</span>ysprep<span class="hljs-symbol">\P</span>anther<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\w</span>inevt<span class="hljs-symbol">\L</span>ogs<span class="hljs-symbol">\*</span><br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\w</span>inevt<span class="hljs-symbol">\T</span>raceFormat<span class="hljs-symbol">\*</span><br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\T</span>emp<span class="hljs-symbol">\*</span><br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\T</span>SSysprep.log<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\w</span>insxs<span class="hljs-symbol">\p</span>oqexec.log<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\w</span>insxs<span class="hljs-symbol">\M</span>anifestCache<span class="hljs-symbol">\*</span><br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\s</span>ervicing<span class="hljs-symbol">\S</span>essions<span class="hljs-symbol">\*</span>_*.xml<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\s</span>ervicing<span class="hljs-symbol">\S</span>essions<span class="hljs-symbol">\S</span>essions.back.xml<br><br>[PinningFolderList]<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\c</span>onfig<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\D</span>riverStore<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\W</span>inSxS<br><br>[CompressionFolderList]<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\S</span>ystem32<span class="hljs-symbol">\W</span>inEvt<span class="hljs-symbol">\L</span>ogs<br><span class="hljs-symbol">\W</span>indows<span class="hljs-symbol">\I</span>nstaller<br></code></pre></td></tr></table></figure><h2 id="compact-工具使用的排除列表"><a href="#compact-工具使用的排除列表" class="headerlink" title="compact 工具使用的排除列表"></a>compact 工具使用的排除列表</h2><p>系统自带的 compact 工具直接使用 <code>DeviceIoControl</code> API 进行 Compact OS 压缩，比 DISM 更加底层。于是其排除列表是内置的，通过 IDA Pro 工具从 compact 工具提取出来的列表如下。</p><p>当然 compact 工具的做法比较暴力，只要判断路径中有列表中的关键字就跳过，但是自己实现起来比较简单。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-comment">// 文件排除列表</span><br>wchar_t <span class="hljs-operator">*</span><span class="hljs-type">FileExclusionList</span>[] <span class="hljs-operator">=</span> <br>&#123;<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>aow.wim&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>boot<span class="hljs-subst">\\</span>bcd&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>boot<span class="hljs-subst">\\</span>bcd.log&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>boot<span class="hljs-subst">\\</span>bootstat.dat&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>config<span class="hljs-subst">\\</span>drivers&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>config<span class="hljs-subst">\\</span>drivers.log&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>config<span class="hljs-subst">\\</span>system&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>config<span class="hljs-subst">\\</span>system.log&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>windows<span class="hljs-subst">\\</span>bootstat.dat&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>winload.efi&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>winload.efi.mui&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>winload.exe&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>winload.exe.mui&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>winresume.efi&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>winresume.efi.mui&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>winresume.exe&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>winresume.exe.mui&quot;</span><br>&#125;;<br><br><span class="hljs-comment">// 目录排除列表</span><br>wchar_t <span class="hljs-operator">*</span><span class="hljs-type">DirectoryExclusionList</span>[] <span class="hljs-operator">=</span> <br>&#123;<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>Backup<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>ManifestCache<span class="hljs-subst">\\</span>&quot;</span>,<br><span class="hljs-type">L</span><span class="hljs-string">&quot;<span class="hljs-subst">\\</span>Manifests<span class="hljs-subst">\\</span>&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>当然上述内容在 GPT 分区表的 Windows 映像实例中没有问题，对于 MBR 分区表的 Windows，Compact OS 还会执行 NTFS 压缩也使用的的排除逻辑，即排除掉 <code>ntldr</code>, <code>cmldr</code> 和 <code>BootMgr</code> 三个文件。</p><h2 id="毛利优化插件的排除列表"><a href="#毛利优化插件的排除列表" class="headerlink" title="毛利优化插件的排除列表"></a>毛利优化插件的排除列表</h2><p>毛利优化插件使用 <code>PathMatchSpecExW</code> API 判断文件是否在排除列表内，逻辑如下。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">if</span> (<span class="hljs-type">S_OK</span> <span class="hljs-operator">==</span> ::<span class="hljs-type">PathMatchSpecExW</span>(<br>    <span class="hljs-type">CurrentPath</span>.c_str(),<br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>WinSxS<span class="hljs-subst">\\</span>Backup;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>WinSxS<span class="hljs-subst">\\</span>ManifestCache;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>WinSxS<span class="hljs-subst">\\</span>Manifests;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>ntldr;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>cmldr;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>BootMgr;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>aow.wim;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>boot<span class="hljs-subst">\\</span>bcd;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>boot<span class="hljs-subst">\\</span>bcd.*;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>boot<span class="hljs-subst">\\</span>bootstat.dat;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>config<span class="hljs-subst">\\</span>drivers;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>config<span class="hljs-subst">\\</span>drivers.*;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>config<span class="hljs-subst">\\</span>system;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>config<span class="hljs-subst">\\</span>system.*;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>windows<span class="hljs-subst">\\</span>bootstat.dat;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>winload.e??*;&quot;</span><br>    <span class="hljs-type">L</span><span class="hljs-string">&quot;*<span class="hljs-subst">\\</span>winresume.e??*;&quot;</span>,<br>    <span class="hljs-type">PMSF_MULTIPLE</span>))<br>&#123;<br>    <span class="hljs-comment">// 跳过文件和目录</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-type">TRUE</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.52pojie.cn/thread-528806-1-1.html">浅谈Windows10的CompactOS特性</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><ul><li><a href="/zh/2021/11/06/The-history-and-principle-of-Compact-OS/" title="Compact OS 的历史和原理">Compact OS 的历史和原理</a></li><li><a href="/zh/2021/11/07/The-usage-of-Compact-OS/" title="Compact OS 的使用方法">Compact OS 的使用方法</a></li><li><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>Compact OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>Compact OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Compact OS 的历史和原理</title>
    <link href="/zh/2021/11/06/The-history-and-principle-of-Compact-OS/"/>
    <url>/zh/2021/11/06/The-history-and-principle-of-Compact-OS/</url>
    
    <content type="html"><![CDATA[<p>Compact OS 是一个相当好用的能够大幅减少 Windows 系统分区占用的技术方案。由于使用了和 WIM 文件中同样的压缩算法，在典型场景下可以让你的文件缩小为原来的三分之二甚至二分之一。本文以尽可能简要的方式来介绍该功能的历史和原理。</p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p><img src="SystemCompression.jpg" alt="Windows 10 Build 9879 的 System Compression 清理项"></p><p>Compact OS 的前身为 Windows 10 Build 9879 在磁盘清理工具引入的 System Compression 清理项，效果相当不错。虽然我记得在之后的 Windows 10 Insider Preview Build 就短暂消失了。直到 Windows 10, Version 1507 快发布的时候，微软正式在文档中以 Compact OS 的名字发布了该功能。</p><p><img src="NTOSKRNL.png" alt="Windows 10 Build 9879 的 System Compression 清理项的压缩效果"></p><p>后来因为一些原因和自己认识的一些 Microsoft 员工聊天了解到 Compact OS 这个功能主要是为了能让Windows 10 运行在当年流行的存储空间只有 32GB 的 Atom 寨板上面，没想到 Windows 10 正式发布以后，这类设备越来越少，于是这个功能也显得越来越没必要了。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>和 Windows 8.1 Update 1 引入的 WIMBoot 功能一样，都基于文件系统过滤驱动。WIMBoot 和 Compact OS的实现都在 Windows Overlay Filter 即 <code>wof.sys</code> 中。</p><p>虽然 Compact OS 和 WIMBoot 使用同样的 WIM 文件中支持的压缩算法，但是 WIMBoot 的压缩后的结果储存在WIM 中，对应在文件系统上的文件仅是一个重解析点。而 Compact OS 则是运用了 NTFS 交替数据流特性，虽然主文件流依然是一个重解析点，但是也增加了一个名为 <code>WofCompressedData</code> 的数据流存放压缩后的结果。</p><p>文件系统过滤驱动的作用主要是截取 Windows 系统其他应用的文件读写，当判断为是使用 WIMBoot 或者 Compact OS压缩后的文件，则会按照存储方式进行解析，这样对于其他应用而已感知不到该机制的存在以解决了大部分兼容性问题。</p><p>Compact OS 相对于 WIMBoot 的优点在于前者比后者更加灵活，可以单独对一个文件进行压缩和解压缩操作。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>2014 年，还在上高二的我在远景发布了《浅谈Windows 10 Build 9879的磁盘清理的System Compression》，这篇文章也是我的得意之作之一，详情可以阅读 <a href="https://bbs.pcbeta.com/viewthread-1567726-1-1.html%E3%80%82">https://bbs.pcbeta.com/viewthread-1567726-1-1.html。</a></p><p>虽然那篇文章算是一针见血地描述了其原理，如果不是当年能力有限，我应该能把用法也挖掘出来。但是现在回过头来看看，写的还是不够成熟。本文的目的是把我之前写的那篇文章的内容进行归纳和扩充。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://bbs.pcbeta.com/viewthread-1567726-1-1.html">浅谈Windows 10 Build 9879的磁盘清理的System Compression</a></li><li><a href="https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/compact-os">Compact OS</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><ul><li><a href="/zh/2021/11/06/The-exclusion-list-of-Compact-OS/" title="Compact OS 的文件和目录排除列表">Compact OS 的文件和目录排除列表</a></li><li><a href="/zh/2021/11/07/The-usage-of-Compact-OS/" title="Compact OS 的使用方法">Compact OS 的使用方法</a></li><li><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>Compact OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>Compact OS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在早期版本的 Windows 10 中实现 Per-Monitor DPI Awareness 模式支持的注意事项</title>
    <link href="/zh/2021/11/05/Notes-for-implement-Per-Monitor-DPI-Awareness-Mode-support-in-earlier-versions-of-Windows-10/"/>
    <url>/zh/2021/11/05/Notes-for-implement-Per-Monitor-DPI-Awareness-Mode-support-in-earlier-versions-of-Windows-10/</url>
    
    <content type="html"><![CDATA[<p>笔者于<a href="/zh/2021/11/03/Enable-Per-Monitor-DPI-Awareness-Mode-for-File-Explorer-in-Windows-10/" title="在 Windows 10 中为文件资源管理器启用 Per-Monitor DPI Awareness 模式">在 Windows 10 中为文件资源管理器启用 Per-Monitor DPI Awareness 模式</a>中提到微软在 Windows 8.1 时期引入的 Per-Monitor DPI Awareness 模式不支持非客户区缩放。如果要做完整的 Per-Monitor DPI Awareness 模式适配，那就需要对非客户区的内容进行完整自绘，作为负责任的开发者还要实现无障碍等特性，在这些要求的束缚下，只有头铁的人才会去实现相关支持，于是我相当能理解当时为啥 Windows 桌面应用对高 DPI 支持不好。</p><p>然而 Windows 10 从第一个版本即 Windows 10, Version 1507 开始，修改了 DPI 缩放比例是不需要注销的，于是没有完整适配Per-Monitor DPI Awareness 模式的应用体验在这种情况下会非常糟糕，而当时的 Windows 10 也没有引入 Program DPI 特性，于是并没有办法通过重启仅支持 System DPI Awareness 模式的应用解决在主显示器上的模糊问题。</p><p>然而 Windows 10, Version 1507 和 Windows 10, Version 1511 的用户界面中的一些对话框在修改了 DPI 缩放比例后不仅客户区可以正确缩放，非客户区也能正确缩放，而且不需要注销，这让我非常好奇。</p><p>经过对 Windows 10 的控制台宿主的分析，我发现了两个非公开的 Windows API 可以让系统自动帮你缩放非客户区和对话框。由于这两个 API 在 Windows 10, Version 1607 已经无法使用，所以调用之前需要做好对 Windows 版本的判断。由于从 Windows 10, Version 1607 引入的从 Windows 10, Version 1703 开始正式支持的 Per-Monitor (V2) DPI Awareness 模式，相对于 Windows 8.1 时期引入的 Per-Monitor DPI Awareness 模式而言支持对非客户区进行自动缩放，所以适当使用本文的技巧，可以让你的应用在 Windows 10 全系列版本下完整支持 Per-Monitor DPI Awareness 模式。</p><p>你也许会问 Windows 8.1 的情况，虽然 Windows 8.1 下并没有找到类似的 API，但是 Windows 8.1 下修改 DPI 缩放后需要注销才会生效，而且如果有多个 DPI 不同的显示器的用户大概率早就升级 Windows 10 及之后版本，于是并不需要太过担心 Windows 8.1 下的问题。</p><h2 id="让-Windows-自动帮你缩放对话框的技巧"><a href="#让-Windows-自动帮你缩放对话框的技巧" class="headerlink" title="让 Windows 自动帮你缩放对话框的技巧"></a>让 Windows 自动帮你缩放对话框的技巧</h2><p>在 Windows 10, Version 1507 和 Windows 10, Version 1511 的 <code>user32.dll</code> 引入了一个叫 <code>EnablePerMonitorDialogScaling</code> 通过序数 2577 调用的非公开 API，你只需要在调用 API 显示对话框之前调用该非公开 API 即可。</p><p>为了方便使用，我将其包装成了一个函数，你可以直接以 <code>EnablePerMonitorDialogScaling()</code> 的方式调用，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;VersionHelpers.h&gt;</span></span><br><br><span class="hljs-function">INT <span class="hljs-title">EnablePerMonitorDialogScaling</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// This hack is only for Windows 10 only.</span><br>    <span class="hljs-keyword">if</span> (!::<span class="hljs-built_in">IsWindowsVersionOrGreater</span>(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// We don&#x27;t need this hack if the Per Monitor Aware V2 is existed.</span><br>    OSVERSIONINFOEXW OSVersionInfoEx = &#123; <span class="hljs-number">0</span> &#125;;<br>    OSVersionInfoEx.dwOSVersionInfoSize = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(OSVERSIONINFOEXW);<br>    OSVersionInfoEx.dwBuildNumber = <span class="hljs-number">14393</span>;<br>    <span class="hljs-keyword">if</span> (::<span class="hljs-built_in">VerifyVersionInfoW</span>(<br>        &amp;OSVersionInfoEx,<br>        VER_BUILDNUMBER,<br>        ::<span class="hljs-built_in">VerSetConditionMask</span>(<span class="hljs-number">0</span>, VER_BUILDNUMBER, VER_GREATER_EQUAL)))<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    HMODULE ModuleHandle = ::<span class="hljs-built_in">GetModuleHandleW</span>(<span class="hljs-string">L&quot;user32.dll&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!ModuleHandle)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">INT</span><span class="hljs-params">(WINAPI* ProcType)</span><span class="hljs-params">()</span></span>;<br><br>    ProcType ProcAddress = <span class="hljs-keyword">reinterpret_cast</span>&lt;ProcType&gt;(<br>        ::<span class="hljs-built_in">GetProcAddress</span>(ModuleHandle, <span class="hljs-keyword">reinterpret_cast</span>&lt;LPCSTR&gt;(<span class="hljs-number">2577</span>)));<br>    <span class="hljs-keyword">if</span> (!ProcAddress)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ProcAddress</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="让-Windows-自动帮你缩放非客户区的技巧"><a href="#让-Windows-自动帮你缩放非客户区的技巧" class="headerlink" title="让 Windows 自动帮你缩放非客户区的技巧"></a>让 Windows 自动帮你缩放非客户区的技巧</h2><p>在 Windows 10, Version 1507 和 Windows 10, Version 1511 的 <code>user32.dll</code> 引入了一个叫 <code>EnableChildWindowDpiMessage</code> 的非公开 API，你只需要在调用 API 创建窗口后调用该非公开 API 即可。</p><p>为了方便使用，我将其包装成了一个函数，你可以直接以 <code>EnableChildWindowDpiMessage(窗口句柄)</code> 的方式调用，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;VersionHelpers.h&gt;</span></span><br><br><span class="hljs-function">BOOL <span class="hljs-title">EnableChildWindowDpiMessage</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    _In_ HWND WindowHandle)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// This hack is only for Windows 10 only.</span><br>    <span class="hljs-keyword">if</span> (!::<span class="hljs-built_in">IsWindowsVersionOrGreater</span>(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    &#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <span class="hljs-comment">// We don&#x27;t need this hack if the Per Monitor Aware V2 is existed.</span><br>    OSVERSIONINFOEXW OSVersionInfoEx = &#123; <span class="hljs-number">0</span> &#125;;<br>    OSVersionInfoEx.dwOSVersionInfoSize = <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(OSVERSIONINFOEXW);<br>    OSVersionInfoEx.dwBuildNumber = <span class="hljs-number">14393</span>;<br>    <span class="hljs-keyword">if</span> (::<span class="hljs-built_in">VerifyVersionInfoW</span>(<br>        &amp;OSVersionInfoEx,<br>        VER_BUILDNUMBER,<br>        ::<span class="hljs-built_in">VerSetConditionMask</span>(<span class="hljs-number">0</span>, VER_BUILDNUMBER, VER_GREATER_EQUAL)))<br>    &#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    HMODULE ModuleHandle = ::<span class="hljs-built_in">GetModuleHandleW</span>(<span class="hljs-string">L&quot;user32.dll&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!ModuleHandle)<br>    &#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">BOOL</span><span class="hljs-params">(WINAPI* ProcType)</span><span class="hljs-params">(HWND, BOOL)</span></span>;<br><br>    ProcType ProcAddress = <span class="hljs-keyword">reinterpret_cast</span>&lt;ProcType&gt;(<br>        ::<span class="hljs-built_in">GetProcAddress</span>(ModuleHandle, <span class="hljs-string">&quot;EnableChildWindowDpiMessage&quot;</span>));<br>    <span class="hljs-keyword">if</span> (!ProcAddress)<br>    &#123;<br>        <span class="hljs-keyword">return</span> FALSE;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ProcAddress</span>(WindowHandle, TRUE);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.52pojie.cn/thread-512713-1-1.html">实现每显示器高DPI识别(Per-Monitor DPI Aware)的注意事项</a></li><li><a href="https://blog.walterlv.com/post/windows-high-dpi-development.html">Windows 下的高 DPI 应用开发（UWP / WPF / Windows Forms / Win32）</a></li><li><a href="https://www.windowscentral.com/how-change-high-dpi-settings-classic-apps-windows-10-april-2018-update">How to change DPI settings for ‘classic’ apps on Windows 10 April 2018 Update</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>用户模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>用户模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在你的 Rust 项目中使用 VC-LTL</title>
    <link href="/zh/2021/11/04/Use-VC-LTL-in-your-Rust-projects/"/>
    <url>/zh/2021/11/04/Use-VC-LTL-in-your-Rust-projects/</url>
    
    <content type="html"><![CDATA[<p>VC-LTL 是一套可以让开发者优雅的使用 Windows 内置的 C 运行时库的编译工具链，可使你编写的二进制在 C 运行库方面仅依赖 Windows 内置的 <code>msvcrt.dll</code> 或 <code>ucrtbase.dll</code>，以达成无需额外部署 MSVC 运行库、解决 FLS 上限问题和大大缩减二进制体积的目标。</p><p>由于笔者前段日子已在 VC-LTL 5.x 的源代码仓库中贡献了 Rust 语言支持的实现，详情可参见 <a href="https://github.com/Chuyu-Team/VC-LTL5/pull/11%E3%80%82">https://github.com/Chuyu-Team/VC-LTL5/pull/11。</a></p><p>于是看到本文的读者只需要在 <code>Cargo.toml</code> 文件内 <code>[dependencies]</code> 中加入以下内容即可达成目的。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">vc-ltl</span> = <span class="hljs-string">&quot;5.0.3-Beta1&quot;</span><br></code></pre></td></tr></table></figure><h2 id="VC-LTL-4-x-用户"><a href="#VC-LTL-4-x-用户" class="headerlink" title="VC-LTL 4.x 用户"></a>VC-LTL 4.x 用户</h2><p>对于还在使用 VC-LTL 4.x 的用户，请参阅 <a href="https://github.com/Chuyu-Team/vc-ltl-samples/tree/master/RustDemo%E3%80%82">https://github.com/Chuyu-Team/vc-ltl-samples/tree/master/RustDemo。</a></p><p>当然由于 VC-LTL 5.x 已经发布，于是强烈建议读者能够升级到 VC-LTL 5.x。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://github.com/Chuyu-Team/VC-LTL5">VC-LTL 5.x 项目地址</a></li><li><a href="https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-cratesio">Specifying dependencies from crates.io</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>开发环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Windows 8.1 中修改开始屏幕的大小</title>
    <link href="/zh/2021/11/03/Modify-the-size-of-Start-Screen-in-Windows-8-1/"/>
    <url>/zh/2021/11/03/Modify-the-size-of-Start-Screen-in-Windows-8-1/</url>
    
    <content type="html"><![CDATA[<p>当年有个叫 Start Charming 的工具可使得 Windows 8 的开始屏幕变成非全屏幕显示，我对其的实现相当感兴趣，于是拿起熟悉的 IDA Pro, ILSpy 和 Spy++ 稍微进行了一些探索，然后发现了相关原理并在远景论坛发了个贴，当年的远景论坛其实还是很有技术力的，于是我和一个叫 KeBugCheckEx 景友又进行了一些深入的讨论，当时的我感觉受益匪浅，于是我打算把当时讨论的内容稍微整理一下，于是就有了这篇文章。</p><h2 id="修改-Windows-8-1-中修改开始屏幕的大小的技巧"><a href="#修改-Windows-8-1-中修改开始屏幕的大小的技巧" class="headerlink" title="修改 Windows 8.1 中修改开始屏幕的大小的技巧"></a>修改 Windows 8.1 中修改开始屏幕的大小的技巧</h2><p>由于 Windows 8.1 的开始屏幕对应的 Win32 窗口类名为 <code>ImmersiveLauncher</code>，于是我们可以使用 FindWindow API通过窗口类名获取窗口句柄，然后就可以使用 MoveWindow 或者 SetWindowPos 之类的 API 去修改 Windows 8.1的开始屏幕的显示位置，于是就可以顺理成章地达成本文的目的。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">using</span> System;<br><span class="hljs-keyword">using</span> System.Runtime.InteropServices;<br><span class="hljs-keyword">using</span> System.Windows.Forms;<br><span class="hljs-keyword">using</span> System.Drawing;<br><br><span class="hljs-keyword">namespace</span> StartScreenToStartMenu<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Program</span></span><br><span class="hljs-class">    &#123;</span><br>        [<span class="hljs-built_in">DllImport</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>)]<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> IntPtr <span class="hljs-title">FindWindow</span><span class="hljs-params">(string lpClassName, string lpWindowName)</span></span>;<br><br>        [<span class="hljs-built_in">DllImport</span>(<span class="hljs-string">&quot;user32.dll&quot;</span>, EntryPoint = <span class="hljs-string">&quot;MoveWindow&quot;</span>)]<br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> <span class="hljs-title">MoveWindow</span><span class="hljs-params">(IntPtr hwnd, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> nWidth, <span class="hljs-keyword">int</span> nHeight, <span class="hljs-keyword">bool</span> bRepaint)</span></span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span><span class="hljs-params">(string[] args)</span></span><br><span class="hljs-function">        </span>&#123;<br>            Rectangle rect = Screen.PrimaryScreen.Bounds;<br><br>            IntPtr childHwnd = <span class="hljs-built_in">FindWindow</span>(<span class="hljs-string">&quot;ImmersiveLauncher&quot;</span>, null);  <br>            <span class="hljs-keyword">if</span> (childHwnd != IntPtr.Zero)<br>            &#123;<br>                <span class="hljs-keyword">int</span> Width = <span class="hljs-number">1024</span>; <span class="hljs-comment">// 自定义开始屏幕的宽度</span><br>                <span class="hljs-keyword">int</span> Height = <span class="hljs-number">768</span>; <span class="hljs-comment">// 自定义开始屏幕的高度</span><br>                <span class="hljs-built_in">MoveWindow</span>(childHwnd, <span class="hljs-number">0</span>, rect.Height - Height - <span class="hljs-number">40</span>, Width, Height, <span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">//MoveWindow(childHwnd, 0, 0, rect.Width, rect.Height, true);  // 如果想恢复原样的话把这行代码复制到上一行就OK了</span><br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-built_in">Console</span>.<span class="hljs-built_in">WriteLine</span>(<span class="hljs-string">&quot;没有找到窗口&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="Screenshot1.png" alt="效果图"></p><h2 id="在桌面上直接显示-Metro-App-的技巧"><a href="#在桌面上直接显示-Metro-App-的技巧" class="headerlink" title="在桌面上直接显示 Metro App 的技巧"></a>在桌面上直接显示 Metro App 的技巧</h2><p>KeBugCheckEx 表示将承载 Metro App 的窗口中的窗口类名为 <code>ImmersiveBackgroundWindow</code> 的背景窗口用 CloseWindow 或者 DestroyWindow 之类的 API 关掉即可。当然仅是这样做的话很明显无法日常使用，如果要想开发出可以日常使用的软件，将承载 Metro App 的窗口当作子窗口塞入到自己的窗口中去应该是一种可行的方案。</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Windows.h&gt;</span></span><br><br><span class="hljs-built_in">int</span> _tmain(<span class="hljs-built_in">int</span> argc, _TCHAR* argv[])<br>&#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)<br>        &#123;<br>                <span class="hljs-built_in">HWND</span> <span class="hljs-built_in">hWnd</span> = FindWindow(L<span class="hljs-string">&quot;Windows.UI.Core.CoreWindow&quot;</span>, <span class="hljs-literal">NULL</span>)<span class="hljs-comment">;</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hWnd</span> != <span class="hljs-literal">NULL</span>)<br>                &#123;<br>                        MoveWindow(<span class="hljs-built_in">hWnd</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>, <span class="hljs-literal">TRUE</span>)<span class="hljs-comment">;</span><br>                &#125;<br>                <span class="hljs-built_in">hWnd</span> = FindWindow(L<span class="hljs-string">&quot;ImmersiveBackgroundWindow&quot;</span>, <span class="hljs-literal">NULL</span>)<span class="hljs-comment">;</span><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">hWnd</span> != <span class="hljs-literal">NULL</span>)<br>                &#123;<br>                        CloseWindow(<span class="hljs-built_in">hWnd</span>)<span class="hljs-comment">;</span><br>                &#125;<br>                <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">50</span>)<span class="hljs-comment">;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="Screenshot2.jpg" alt="效果图"></p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="http://bbs.pcbeta.com/viewthread-1524688-1-1.html">自定义开始屏幕的大小</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>用户模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>用户模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Windows 10 中为文件资源管理器启用 Per-Monitor DPI Awareness 模式</title>
    <link href="/zh/2021/11/03/Enable-Per-Monitor-DPI-Awareness-Mode-for-File-Explorer-in-Windows-10/"/>
    <url>/zh/2021/11/03/Enable-Per-Monitor-DPI-Awareness-Mode-for-File-Explorer-in-Windows-10/</url>
    
    <content type="html"><![CDATA[<p>众所周知，微软从 Windows 8.1 开始在 Windows 中添加了 Per-Monitor DPI Awareness 模式。也就是说 Windows 8.1及之后的 Windows 版本下运行的应用只有实现了 Per-Monitor DPI Awareness 模式支持才能算是真正的支持高 DPI 缩放。</p><p>如果你仅实现了 System DPI Awareness 模式支持，在多个 DPI 缩放比例不同的显示器下把窗口从一个显示器拖拽到另一个显示器，或者在 Windows 10 即之后的版本下修改了 DPI 缩放比例而没有注销，Windows 将会使用 DPI 虚拟化进行强制缩放，用户就会看到一个模糊的软件界面并大概率会对开发者进行吐槽。</p><p>我在 2016 年 6 月的时候试图给我的项目实现 Per-Monitor DPI Awareness 模式支持，但是非客户区无法正常缩放，譬如应用窗口中的内容正常的响应了 WM_DPICHANGED 事件而正常缩放，但是标题栏、菜单栏、菜单这样元素却完全没有缩放。</p><p>但是发现微软使用 Win32 API 实现的运行对话框的标题栏、菜单栏和菜单却能正常动态缩放，于是我对此表示相当好奇。经过使用 IDA 一番查找，我发现运行对话框的实现在 Shell32.dll 中的一个叫 RunFileDlg 的函数里面。虽然那时的我暂时没找到微软的做法，但是偶然发现一个 API 让我感觉很有意思，伪代码如下：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs smali">char __stdcall IsPerMonitorAwareFileExplorerEnabled()<br>&#123;<br>  signed<span class="hljs-built_in"> int </span>v0; // eax@1<br>  char v1; // bl@1<br> <span class="hljs-built_in"> int </span>v3; // [sp+4h] [bp-Ch]@2<br> <span class="hljs-built_in"> int </span>v4; // [sp+8h] [bp-8h]@2<br> <span class="hljs-built_in"> int </span>v5; // [sp+Ch] [bp-4h]@2<br> <br>  v0 = dword_69DB0A24;<br>  v1 = 1;<br> <span class="hljs-built_in"> if </span>( !dword_69DB0A24 )<br>  &#123;<br>    v4 &amp;= dword_69DB0A24;<br>    v5 = 4;<br>   <span class="hljs-built_in"> if </span>( !RegGetValueW(<br>            -2147483646,<br>            L<span class="hljs-string">&quot;Software\\Microsoft\\Windows\\CurrentVersion\\FlightedFeatures&quot;</span>,<br>            L<span class="hljs-string">&quot;PerMonitorAwareFileExplorer&quot;</span>,<br>            0x10010,<br>            &amp;v4,<br>            &amp;v3,<br>            &amp;v5) )<br>    &#123;<br>      v1 = 1;<br>     <span class="hljs-built_in"> if </span>( v3 == 1 )<br>      &#123;<br>        dword_69DB0A24 = 1;<br>       <span class="hljs-built_in"> return </span>v1;<br>      &#125;<br>      dword_69DB0A24 = 2;<br>     <span class="hljs-built_in"> goto </span><span class="hljs-class">LABEL_6;</span><br>    &#125;<br>    v0 = 1;<br>    dword_69DB0A24 = 1;<br>  &#125;<br> <span class="hljs-built_in"> if </span>( v0 != 1 )<br>LABEL_6:<br>    v1 = 0;<br> <span class="hljs-built_in"> return </span>v1;<br>&#125;<br></code></pre></td></tr></table></figure><p>粗略看了看，这是微软在文件资源管理器内部使用的是否开启 Per-Monitor DPI Awareness 模式判断逻辑，于是我顺理成章地猜测如果这个函数能返回 true，那么文件资源管理器就可以支持 Per-Monitor DPI Awareness 模式了。毕竟文件资源管理器默认以 System DPI Awareness 模式运行，在 Windows 10 一调整 DPI 缩放比例就会模糊令人相当难受。</p><p>于是我尝试在 <code>HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\FlightedFeatures</code> 注册表键下创建值为 1 名为 <code>PerMonitorAwareFileExplorer</code> 的 DWORD 值然后重启文件资源管理器进程看看会有什么效果。</p><p>然而调整 DPI 缩放比例后不注销结果还是模糊的，一看文件资源管理器对应的进程还是 System DPI Awareness 模式，突然我想到我可以去掉文件夹选项的 <code>在单独的进程中打开文件夹窗口</code> 试试，于是文件资源管理器进程总算是 Per-Monitor DPI Awareness 模式了；这让我感觉很有戏，于是我尝试我打开文件资源管理器后把 DPI 缩放比例从 100% 调整到 125% 并且不注销；文件资源管理器正常缩放而且界面不模糊，相当的完美。</p><p><img src="Screenshot.png" alt="屏幕截图"></p><p>当然这个方法仅保证在 Windows 10, Version 1511 下测试通过，之后的 Windows 版本不保证还能这么做。</p><h2 id="额外补充"><a href="#额外补充" class="headerlink" title="额外补充"></a>额外补充</h2><p>这篇原本发布在吾爱破解论坛的文章是我探究如何实现一个真正的支持高 DPI 缩放的 Windows 应用程序的起点。</p><p>其实如果不使用本文的技巧在比较新的 Windows 10 版本且不启用 <code>在单独的进程中打开文件夹窗口</code> 的情况下，文件资源管理器正常缩放而且界面不模糊。至少从 Windows 11 开始，即使启用了 <code>在单独的进程中打开文件夹窗口</code> 文件资源管理器也依然能正常缩放而且界面不模糊。从这点能看出微软在文件资源管理器的现代化方面还是很努力的。</p><p>当然在 2021 年回头思考，微软在 Windows 8.1 时期引入的 Per-Monitor DPI Awareness 模式不支持非客户区缩放是彻底的败笔，毕竟在这种情况下如果要做适配，那就需要对非客户区的内容进行完整自绘，作为负责任的开发者还要实现无障碍等特性，在这些要求的束缚下，只有头铁的人才会去实现相关支持，于是我相当能理解当时为啥 Windows 桌面应用对高 DPI 支持不好。</p><p>当然微软也意识到了这一点，从 Windows 10, Version 1607 引入的从 Windows 10, Version 1703 开始正式支持的Per-Monitor (V2) DPI Awareness 模式，相对于 Windows 8.1 时期引入的 Per-Monitor DPI Awareness模式而言支持对非客户区进行自动缩放，而且可以局部指定 DPI 感知模式，大大降低了适配难度。</p><p>顺便吐槽下，即使微软发布了 Per-Monitor (V2) DPI Awareness 模式，我记得在 Windows 10, Version 1809 之前，Windows 通用应用的标题栏右键出现的系统菜单在调整 DPI 缩放比例后并不会缩放，也就是依然是 Per-Monitor DPI Awareness 模式。当然实际影响并不是很大，因为 Windows 通用应用是全自绘应用，除了系统菜单之外的菜单都是自绘的，而系统菜单其实使用的情况也并不是那么常见，于是没有注意到这个问题也是正常情况。</p><p>如果你想更进一步，在 Windows 10, Version 1507 和 Windows 10, Version 1511 也希望能够实现媲美Per-Monitor (V2) DPI Awareness 模式的效果以实现全 Windows 版本下在生效新的 DPI 缩放比例后依然不会模糊，可以阅读<a href="/zh/2021/11/05/Notes-for-implement-Per-Monitor-DPI-Awareness-Mode-support-in-earlier-versions-of-Windows-10/" title="在早期版本的 Windows 10 中实现 Per-Monitor DPI Awareness 模式支持的注意事项">在早期版本的 Windows 10 中实现 Per-Monitor DPI Awareness 模式支持的注意事项</a>。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://www.52pojie.cn/thread-506556-1-1.html">开启Win10的文件资源管理器的每显示器DPI缩放（Per-Monitor DPI Aware）支持</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/hidpi/high-dpi-desktop-application-development-on-windows#dpi-awareness-mode">DPI Awareness Mode</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>用户模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>用户模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>控制 WSL 2 实例的内存占用</title>
    <link href="/zh/2021/11/02/Control-the-memory-usage-of-WSL-2-instance/"/>
    <url>/zh/2021/11/02/Control-the-memory-usage-of-WSL-2-instance/</url>
    
    <content type="html"><![CDATA[<p>前段日子重装了我的台式机里面的 Linux 子系统，顺便把子系统版本从 WSL1 迁移到了 WSL2。</p><p>WSL2 实质上是一个 Hyper-V 虚拟机，只是里面跑的是微软为 Hyper-V 高度优化后的 Linux 内核，于是 WSL2 冷启动速度非常迅速，在我的台式机上不到一秒钟就能完成其冷启动全过程。</p><p>由于 WSL2 实质是个虚拟机而不是 WSL1 那种把 Linux 系统调用翻译成 Windows 系统调用的方式，于是在 I/O 操作这种系统调用密集型操作上效率有了质的提升，而且还支持挂载 ext4 等 Windows 本身不支持的文件系统。</p><p>然而我在用 WSL2 的一开始就因为使用 apt 安装 texlive 的时候发现内存占用爆表，最后研究了下是 Linux 内核文件缓存占了非常多的内存而且既然是缓存那么大概率是不会释放的，于是 Hyper-V 即使支持智能释放虚拟机空闲内存也起不了多少作用。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在用户配置目录下创建了 <code>.wslconfig</code> 文件，然后填入了以下内容保存后问题成功解决。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[wsl2]</span><br><span class="hljs-attr">memory</span>=<span class="hljs-number">4</span>GB<br></code></pre></td></tr></table></figure><h2 id="默认行为"><a href="#默认行为" class="headerlink" title="默认行为"></a>默认行为</h2><ul><li>Windows 10 Build 20175 及之后版本<ul><li>最大占用 Windows 可使用的总内存的 50% 或 8GB (以较小者为准)</li></ul></li><li>Windows 10 Build 20175 之前版本<ul><li>最大占用 Windows 可使用的总内存的 80%</li></ul></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/wsl-config#global-configuration-options-with-wslconfig">Global configuration options with .wslconfig</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>开发环境</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>开发环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 8 及之后版本的系统还原的新行为</title>
    <link href="/zh/2021/11/02/New-behavior-of-System-Restore-since-Windows-8/"/>
    <url>/zh/2021/11/02/New-behavior-of-System-Restore-since-Windows-8/</url>
    
    <content type="html"><![CDATA[<p>从 Windows 8 开始，微软对系统还原的行为进行了变更。</p><h2 id="系统还原点最小创建时间间隔"><a href="#系统还原点最小创建时间间隔" class="headerlink" title="系统还原点最小创建时间间隔"></a>系统还原点最小创建时间间隔</h2><p>从 Windows 8 开始，系统还原点默认最小创建间隔为 24 小时。即在创建一个新的系统还原点 24 小时以内试图再创建新的系统还原点则会被跳过。</p><p>我们可以在 <code>HKLM\Software\Microsoft\Windows NT\CurrentVersion\SystemRestore</code> 注册表键下创建值为 N (单位分钟) 名为 <code>SystemRestorePointCreationFrequency</code> 的 DWORD 值来指定系统还原点的最小创建时间间隔。</p><h2 id="仅监控启动卷上的文件变更"><a href="#仅监控启动卷上的文件变更" class="headerlink" title="仅监控启动卷上的文件变更"></a>仅监控启动卷上的文件变更</h2><p>从 Windows 8 开始，系统还原仅监控启动卷上系统还原所需要捕获的文件变更。Windows 8 之后版本在其 Windows 启动卷创建的系统还原点如果被早期版本的 Windows 检测到可能会被其删除。</p><p>我们可以在 <code>HKLM\Software\Microsoft\Windows NT\CurrentVersion\SystemRestore</code> 注册表键下创建值为 0 名为 <code>ScopeSnapshots</code> 的 DWORD 值以使系统还原将以早期版本 Windows 的方式在启动卷上创建快照。</p><p>如果希望继续使用新行为，则删除该注册表键即可。</p><h2 id="原文勘误"><a href="#原文勘误" class="headerlink" title="原文勘误"></a>原文勘误</h2><p>当年在<a href="https://bbs.pcbeta.com/viewthread-1507617-1-1.html">Windows系统还原新探（Windows系统还原的较深入研究）</a>中我写的下述内容其实是有误的。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">如果你的电脑是多系统并且其中一个是 Windows XP 的话，为了解决 NT6 系统还原点和NT5的不兼容问题；<br>在 Windows 8 以后，可以这样操作使系统可以在启动卷上创建和 Windows XP 风格的还原点。<br><br>在注册表 HKLM<span class="hljs-symbol">\S</span>oftware<span class="hljs-symbol">\M</span>icrosoft<span class="hljs-symbol">\W</span>indows NT<span class="hljs-symbol">\C</span>urrentVersion<span class="hljs-symbol">\S</span>ystemRestore 下面创建一个名为<br>ScopeSnapshots 的 DWORD 值。如果这个值为 0，系统还原将以早期版本的 Windows 的方式在启动卷上创建快照。<br>如果这个值被删除，则系统还原会按照 Windows 8 的方式创建系统还原点。<br></code></pre></td></tr></table></figure><p>当时我的理解是修改了 <code>ScopeSnapshots</code> 以后，在 Windows 8 之后的 Windows 会使用 Windows XP 或者 Windows Server 2003 的方式创建系统还原点，但实际上应该是以 Windows Vista 和 Windows 7 及其对应的服务器版本的方式创建系统还原点。</p><p>其实在最近几年我对系统还原实现进行逆向的时候，Windows Vista 之后的系统还原实现已经完全基于卷影复制实现。Windows 8 之后的系统还原实现也没有任何与 Windows XP 或者 Windows Server 2003 的系统还原有关的兼容逻辑。毕竟 Windows Vista 之前的系统还原是基于微软自己写的过滤驱动实现的，而 Windows Vista 以后早已没有该过滤驱动的相关痕迹。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://bbs.pcbeta.com/viewthread-1507617-1-1.html">Windows系统还原新探（Windows系统还原的较深入研究）</a></li><li><a href="https://docs.microsoft.com/en-us/windows/win32/sr/calling-srsetrestorepoint">Calling SRSetRestorePoint</a></li></ul><h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h2><a href="/zh/2021/11/02/Windows-Research-Notes/" title="Windows 研究笔记">Windows 研究笔记</a>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
      <category>系统还原</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
      <tag>系统还原</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows 研究笔记</title>
    <link href="/zh/2021/11/02/Windows-Research-Notes/"/>
    <url>/zh/2021/11/02/Windows-Research-Notes/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家好，我是毛利。</p><p>我很喜欢撰写技术文章，尤其喜欢去远景论坛发表长篇技术贴，因为我觉得在很多人去的论坛发表文章可以让更多的人看到，使更多的人因为我写的技术文章得到帮助。</p><p>大概在 2014 到 2016 年，是我的高产期。后来我不怎么发布技术文章了，比较那时的我没有灵感写长篇技术文章。但那时的自己又没有勇气发布短篇技术文章，因为担心其他人说我在论坛水贴。</p><p>众所周知，前几年远景论坛的服务器非常不稳定，动不动就无法访问。于是那时的我萌生了把自己在远景等论坛发表的文章都归纳到自己在 GitHub 托管的博客里面。毕竟论坛不可能永远存在，但是 Git 仓库每个人都能做备份，能让我写的内容流传下去。</p><p>后来远景论坛恢复正常后，我忘记了这件事。直到最近因为一些契机，且在友人 walterlv 的鼓励下，使得我下定决心这么做。</p><p>我并不会单纯的归档之前撰写的技术文章，而是会根据之前的内容以我现在的视角去对内容进行勘误和重写。希望借此能够减少潜在的理解错误的地方，能够更好的帮助看到我这一系列文章的读者。</p><p>如果发现了本系列文章中的错误内容，或者有更好的建议，请直接在<a href="https://github.com/MouriNaruto/MouriNaruto/issues">https://github.com/MouriNaruto/MouriNaruto/issues</a> 反馈。</p><p>注：本索引会随着本系列内容的更新而更新。</p><p>注：目录中无超链接的文章条目即我未来想写的内容。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li>Windows 系统还原<ul><li><a href="/zh/2021/11/14/The-usage-of-System-Restore/" title="系统还原的使用方法">系统还原的使用方法</a></li><li><a href="/zh/2021/11/14/Using-System-Restore-with-CSharp/" title="通过 C# 使用系统还原">通过 C# 使用系统还原</a></li><li><a href="/zh/2021/11/14/Using-System-Restore-with-Cpp/" title="通过 C++ 使用系统还原">通过 C++ 使用系统还原</a></li><li><a href="/zh/2021/11/02/New-behavior-of-System-Restore-since-Windows-8/" title="Windows 8 及之后版本的系统还原的新行为">Windows 8 及之后版本的系统还原的新行为</a></li></ul></li><li>Compact OS<ul><li><a href="/zh/2021/11/06/The-history-and-principle-of-Compact-OS/" title="Compact OS 的历史和原理">Compact OS 的历史和原理</a></li><li><a href="/zh/2021/11/06/The-exclusion-list-of-Compact-OS/" title="Compact OS 的文件和目录排除列表">Compact OS 的文件和目录排除列表</a></li><li><a href="/zh/2021/11/07/The-usage-of-Compact-OS/" title="Compact OS 的使用方法">Compact OS 的使用方法</a></li></ul></li><li>Windows 用户模式 (Win32 API, NT API, Windows Runtime)<ul><li><a href="/zh/2021/11/03/Enable-Per-Monitor-DPI-Awareness-Mode-for-File-Explorer-in-Windows-10/" title="在 Windows 10 中为文件资源管理器启用 Per-Monitor DPI Awareness 模式">在 Windows 10 中为文件资源管理器启用 Per-Monitor DPI Awareness 模式</a></li><li><a href="/zh/2021/11/03/Modify-the-size-of-Start-Screen-in-Windows-8-1/" title="在 Windows 8.1 中修改开始屏幕的大小">在 Windows 8.1 中修改开始屏幕的大小</a></li><li><a href="/zh/2021/11/05/Notes-for-implement-Per-Monitor-DPI-Awareness-Mode-support-in-earlier-versions-of-Windows-10/" title="在早期版本的 Windows 10 中实现 Per-Monitor DPI Awareness 模式支持的注意事项">在早期版本的 Windows 10 中实现 Per-Monitor DPI Awareness 模式支持的注意事项</a></li><li><a href="/zh/2021/11/07/Launch-Windows-Store-App-via-Win32-API/" title="使用 Win32 API 启动 Windows 商店应用">使用 Win32 API 启动 Windows 商店应用</a></li><li><a href="/zh/2021/11/14/Defrag-memory-with-NT-API/" title="使用 NT API 整理内存碎片">使用 NT API 整理内存碎片</a></li><li><a href="/zh/2021/11/14/Bypass-file-and-registry-access-check-only-with-Administrator/" title="仅在管理员权限下绕过文件和注册表访问检查">仅在管理员权限下绕过文件和注册表访问检查</a></li></ul></li><li>开发环境 (Visual Studio, MSBuild, Cargo)<ul><li><a href="/zh/2021/11/02/Control-the-memory-usage-of-WSL-2-instance/" title="控制 WSL 2 实例的内存占用">控制 WSL 2 实例的内存占用</a></li><li><a href="/zh/2021/11/04/Use-VC-LTL-in-your-Rust-projects/" title="在你的 Rust 项目中使用 VC-LTL">在你的 Rust 项目中使用 VC-LTL</a></li><li><a href="/zh/2021/11/08/Develop-autonomous-driving-stack-with-Autoware-Auto-and-Windows-11/" title="使用 Autoware.Auto 和 Windows 11 进行自动驾驶开发">使用 Autoware.Auto 和 Windows 11 进行自动驾驶开发</a></li><li><a href="/zh/2021/11/14/Tricks-for-parallel-compilation-with-MSVC-toolchain/" title="使用 MSVC 工具链进行并行编译的技巧">使用 MSVC 工具链进行并行编译的技巧</a></li><li><a href="/zh/2021/11/17/Some-noticeable-issues-in-Windows-10-Build-1904x-ISOs/" title="Windows 10 Build 1904x ISO 中存在的问题和解决方案">Windows 10 Build 1904x ISO 中存在的问题和解决方案</a></li><li><a href="/zh/2021/11/23/Build-Qt-6-with-VC-LTL/" title="使用 VC-LTL 构建 Qt 6">使用 VC-LTL 构建 Qt 6</a></li><li><a href="/zh/2021/11/25/Use-VC-LTL-in-your-Cpp-WinRT-UWP-projects/" title="在你的 C++&#x2F;WinRT UWP 项目中使用 VC-LTL">在你的 C++&#x2F;WinRT UWP 项目中使用 VC-LTL</a></li></ul></li></ul><h2 id="待收录的文章"><a href="#待收录的文章" class="headerlink" title="待收录的文章"></a>待收录的文章</h2><ul><li><a href="http://bbs.pcbeta.com/viewthread-1611980-1-1.html">浅谈Metro App的沙盒AppContainer</a>  </li><li><a href="http://bbs.pcbeta.com/viewthread-1519551-1-1.html">原生集成Windows 8/8.1 自带的Windows Defender病毒库的教程</a></li></ul><h2 id="计划编写的文章"><a href="#计划编写的文章" class="headerlink" title="计划编写的文章"></a>计划编写的文章</h2><ul><li>App Container<ul><li>App Container 基本介绍</li><li>通过 Win32 API 使用 App Container</li><li>通过第三方工具使用 App Container</li><li>通过 NT API 创建 App Container 访问令牌及注意事项</li><li>Windows 10 及之后版本的 App Container 行为变更</li></ul></li><li>Windows 用户模式 (Win32 API, NT API, Windows Runtime)<ul><li>Windows 内置的 C 运行时库的历史沿革</li><li>通过 Windows Runtime API 实现对商店应用的升级</li><li>Windows 应用程序打包项目的已知问题和解决方案</li><li>使用 C++/WinRT 实现一个轻量级 XAML Island 应用</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>Windows</category>
      
      <category>Windows 研究笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
      <tag>Windows</tag>
      
      <tag>Windows 研究笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 Windows 平台上移除 ARM32 支持</title>
    <link href="/zh/2021/05/17/Drop-ARM32-support-on-the-Windows-platform/"/>
    <url>/zh/2021/05/17/Drop-ARM32-support-on-the-Windows-platform/</url>
    
    <content type="html"><![CDATA[<p>经过审慎考虑，在我为主要维护者的开源项目（譬如 NSudo）的未来版本将会移除 ARM32 支持，主要原因如下：</p><ul><li>Windows ARM32 桌面版本停滞在 Redstone 2 Insider Build 15035，虽然 ARM32 版本还有 Windows RT 8.1 和 Windows 10 IoT Core 系列没有结束支持，然而估计绝大部分非考古用途人士基本已经放弃使用相关设备（Windows RT 8.x 平板）和有更好的替代品（树莓派上使用 IoT Core ARM32 其实不如直接迁移到 Linux 或者 Windows 10 ARM64 桌面版本）。</li><li>未来的 ARM 处理器将会砍掉 ARM32 指令集支持，其实 Apple Silicon M1 已经这么做了，所以在该设备上跑的 Windows 10 ARM64 桌面版应该并不支持 ARM32 应用（毕竟 ARM64 下的 ARM32 应用支持和 x64 下的 x86 应用支持原理类似，都是硬件直接执行而不是仿真）。</li><li>对未来采用 Rust, .NET 和 Project Reunion 编写部分实现的可能性的考量，这些设施在 Windows 下大概率不会重新考虑支持 ARM32 应用开发支持。</li><li>减小发行包的体积、加快连续集成执行速度。</li></ul><p>毛利</p>]]></content>
    
    
    <categories>
      
      <category>公告</category>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>公告</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从北京到《赛博朋克 2077》</title>
    <link href="/zh/2020/12/18/from-beijing-to-cyberpunk-2077/"/>
    <url>/zh/2020/12/18/from-beijing-to-cyberpunk-2077/</url>
    
    <content type="html"><![CDATA[<p>自从上个月的 23 日到达北京，与线上的一个友人见了一面并找到新的工作之后，就于此安顿下来。我看了看日历，看起来在北京呆了差不多一个月的，也是写点感触的时候了，顺便写最近购买的新出的《赛博朋克 2077》。</p><p>首先，我在 23 日遇到的友人经历传奇到令人肃然起敬，但是却非常低调。为了使友人能够不受打扰，在写公开内容的地方，还是不说为妙。</p><p>这篇文章这么命名的原因，主要也是希望通过写对《赛博朋克 2077》的感受顺便大致描述下我在北京的经历。</p><p>首先，《赛博朋克 2077》的新手引导个人觉得是比波兰蠢驴的上一款口碑之作《巫师3：狂猎》和米忽悠家的《原神》要友好的。至少对于我这样的玩家是这样的，基本上不会因为找不到东西而使得自己在新手引导卡住。</p><p>个人觉得新手引导的友好与否直接关乎到一个游戏是否能玩的下去，毕竟就是因为这个原因使得我玩了一天《巫师3：狂猎》才突破新手引导，毕竟杰洛特有个东西很难找。就像我大概一个月前刚到北京，如果没有我的母亲的协助的话，我也不可能很快的在北京安顿下来，说不定会弃坑。</p><p>夜之城的描绘则让我想到了北京，尤其是我暂时居住的地方，夜间和白天基本上一样繁华。再加上即使不开光线追踪的夜之城的渲染效果足够真实，让我总会想到现实生活。</p><p>倒是当时我差点选择公司开头，而不是流浪者，当然我玩的角色是个女孩子，其捏脸系统虽然不能说非常强悍，但是也让我陷入了深深的困扰，最后点了随机按钮，选择了我感觉还 OK 的外貌。倒是使用女性角色的话，你应该会感受到主角的声音非常御姐，感觉和 B 站的某个 up 主声线类似。</p><p>其驾驶系统体验挺糟糕的，让我想起了曾经我还在学校的自动驾驶实验室里摸索过的某个自动驾驶训练数据集里面训练用的一个叫Torcs 的一个跨平台的老游戏。其驾驶视角非常容易变更，不能自动跟随，于是驾驶不是很舒服。其实射击的感觉也是，感觉有点不真实。</p><p>由于我是 PC 玩家，于是没有体验到非常糟糕的主机优化。倒是……这家伙不开光追感觉拉不开特效的差距。不开光追的最高和最低特效，也就是 24 帧到 56 帧的感受，在我的笔记本上的 1060 的确是这样的。波兰蠢驴依然和以前一样有诚意，我作为从 GOG 购买的用户，额外附赠的内容还是挺不错的。其配乐倒是和巫师不同，没那么丰富比较同质化。游戏的细节做的也很认真，我主要指的是纹理和音效，还有本地化做的相当不错。</p><p>但是，我却隐约觉得波兰蠢驴没有把自己的诚意发挥在恰当的地方。譬如游戏的驾驶和射击感受，我没有体验到的海量 Bug 还有主机端的糟糕优化。</p><p>我虽然对开放世界表示不是很适应，比较能探索的内容太多会让人迷失方向。然而，赛博朋克类型的游戏不大一样，需要一些多变性的场景，否则会让人感觉在强制接受他人的经历一样。</p><p>关于这家伙跳票数次，我感觉主要原因有二，一要等英伟达的新款显卡，二因为前段日子蠢驴压榨事件而导致无法继续压榨员工于是只能跳票。说到压榨，游戏开发者从去年到今年经历了 996，让我想到了三个月前还在实验室 007 的自己。我也知道游戏是一个随时都会有大变更的项目，而且对内容的要求越来越多……于是新游戏多次跳票应该是未来的常态吧。</p><p>由于最近事情比较多，于是我卸载了这款游戏，于是我的机器上也回到了以前的没有安装第三方游戏的状态。只是为了在事情结束后再次游玩，顺便也算是跟进波兰蠢驴的对游戏口碑问题的应对方案了。</p>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
      <category>赛博朋克 2077</category>
      
      <category>生活</category>
      
      <category>北京</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏</tag>
      
      <tag>赛博朋克 2077</tag>
      
      <tag>生活</tag>
      
      <tag>北京</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在我的博客仓库使用连续集成</title>
    <link href="/zh/2020/12/06/using-ci-in-my-blog-repo/"/>
    <url>/zh/2020/12/06/using-ci-in-my-blog-repo/</url>
    
    <content type="html"><![CDATA[<p>众所周知，我的这个基于 hexo 的博客是托管在一个 GitHub 仓库之中。</p><p>由于每次更新博客都需要自己通过命令行进行手动生成，所以我打算在我的博客仓库引入连续集成以实现自动构建。</p><p>一开始，我想参照我的友人落樱的博客仓库的做法，然而他用的连续集成服务我之前并没有注册过。</p><p>为了究极的偷懒，于是我去网上搜寻如何使用 AppVeyor 连续集成服务自动构建基于 hexo 的博客的文章。</p><p>首先，读者可以通过下述我也参阅过的文章去了解如何使用 AppVeyor 连续集成服务自动构建基于 hexo 的博客。</p><ul><li><a href="https://www.jianshu.com/p/58cca2054d80">Github Hexo AppVeyor个人博客搭建和持续集成</a></li><li><a href="https://blog.csdn.net/Mculover666/article/details/94837390">【Hexo搭建个人博客】（十一）使用Appveyor持续集成博客（备份Hexo博客源文件）</a></li></ul><p>毕竟，我也想偷懒，那么我也不会写其他人都会写到的内容。</p><p>当然，我也知道，如果不写点与众不同的内容，那么也对不起浪费了宝贵时间更新博客的自己。</p><p>于是，我说点我遇到的我看到的文章没有谈到的事情吧。</p><p>首先，是 AppVeyor CI 预装的 Node.js 版本过旧的问题，导致我的博客包无法正确编译。</p><p>当然，在踩过了一些坑后，解决方案也很简单，可以参阅下述内容就能轻松的解决。</p><ul><li><a href="https://github.com/appveyor/ci/issues/2921">Node 12.0 support · Issue #2921 · appveyor/ci</a></li><li><a href="https://github.com/atom/fs-admin/blob/master/appveyor.yml">fs-admin/appveyor.yml at master · atom/fs-admin</a></li></ul><p>其次，我为了更方便的管理我的个人事务，我的博客仓库从 <a href="https://github.com/MouriNaruto/MouriNaruto.github.io">https://github.com/MouriNaruto/MouriNaruto.github.io</a>迁移到了 <a href="https://github.com/MouriNaruto/MouriNaruto/tree/master/blog-source%E3%80%82">https://github.com/MouriNaruto/MouriNaruto/tree/master/blog-source。</a></p><p>毕竟 GitHub 前段日子出了个新特性，在个人的账户下放一个和个人 ID 同名的仓库可以在 GitHub 上显示特定的内容。</p><p>我觉得，既然可以这么做，那么我就把和个人介绍有关的全部内容放在这个仓库好了，这也是我这么做的理由。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>CI</tag>
      
      <tag>AppVeyor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的一些在 shapez.io 中的设计</title>
    <link href="/zh/2020/11/02/share-my-design-in-shapez-io/"/>
    <url>/zh/2020/11/02/share-my-design-in-shapez-io/</url>
    
    <content type="html"><![CDATA[<p>在三天前，我的友人魔王殿给我推荐了一款 shapez.io 的游戏。我大概玩了 20 个小时，感觉这是一款自动化生成类型的开源的沙盒游戏。这款游戏非常不错，只是我今天把其卸载了，毕竟我不想让自己沉迷其中。说的这么冠冕堂皇，其实还是接下来一段时间我需要一些重要的事情而已。（笑）</p><p>虽然是卸载了，但是过段时间我应该还会再次游玩，为了保险起见我备份了自己的存档。顺便分享下我在其中做的一些设计，当然魔王殿在这方面指点了我不少。</p><p>由于 shapez.io 只提供红绿蓝三色的直接采集，其他四色即白黄青紫需要使用颜色合成单元进行合成。</p><p>首先展示一下三色颜料合成机，也就是白色合成机的实现。</p><p><img src="three_colour_compositor.png" alt="三色颜料合成机"></p><p>由于传送带的速度为 6 个每秒，而颜色合成单元的速度为 0.6 个每秒，于是需要对其进行并行化。在这里我们只需要采用均衡器和隧道来实现把原色尽可能多的分配个颜色处理单元，然后最后使用合并器对结果进行合并，以提升传送带的利用效率。</p><p>依葫芦画瓢，同理可得双色颜料合成机，也就是黄色、青色和紫色合成机的实现。</p><p><img src="two_colour_compositor.png" alt="双色颜料合成机"></p><p>为了更好的使用采集与合成的颜料，于是我打算对其进行中心化管理，这是我引入调色盘概念的原因。下面两图分别是调色盘前端和和调色盘整体的实现。</p><p><img src="colour_palette_frontend.png" alt="调色盘前端"></p><p><img src="colour_palette_overview.png" alt="调色盘整体"></p><p>由于在后面的关卡解锁了蓝图，终于可以在其中有条件的复制粘贴了，虽然要耗费某种最终材料，下文简称蓝图。为了更方便的复制粘贴，所以我对蓝图的制造实现了自动化，下图是其整体结构。</p><p><img src="blueprint_producer_overview.png" alt="蓝图制造机整体"></p><p>虽然看起来比较复杂，但如果按照前面制造颜料合成机的方式，制造着色器和合并机就不会感觉到困难。当然，你说造起来比较麻烦，其实也不一定。因为之前解锁蓝图的时候会预先制造一些蓝图，于是你可以对一些简单的单元进行复制粘贴。详细结构可参考下图。</p><p><img src="blueprint_producer_detail.png" alt="蓝图制造机详细"></p><p>由于该游戏的通关和基本制造单元的升级条件需要制造一些奇形怪状的图形，于是设计一个高效率的切割机是必由之路。由于该游戏要求比较多，所以我只展示最基本的实现，也就是对对称图形进行切割然而输出其上半或下半部分。</p><p><img src="half_cutter.png" alt="上半和下半切割机"></p><p>对并行化的着色器、合并机和切割机的设计进行调整和组合，可以满足该游戏的大部分要求。譬如这是一个生成由四个直角梯形组成的风车图形的制造单元。</p><p><img src="complex_product_producer.png" alt="复杂单元制造"></p><p>由于我通过了第十五关，解锁了仓库，仓库可以帮助玩家更好的计划物件的生产，个人觉得这玩意类似计算机中缓冲区的概念。这是我的简单并行仓库，主要是为了通过第十六关，虽然真正通过估计要过段时间了。</p><p><img src="buffer_design.png" alt="并行仓库"></p><p>当然忘记说了，shapez.io 要通关的话，所有的产物都得交给基地，下图展示下这个要求颇多的物件。</p><p><img src="base.png" alt="基地"></p><p>总之，这游戏挺好玩的，感谢魔王殿的推荐，笑。</p>]]></content>
    
    
    <categories>
      
      <category>游戏</category>
      
      <category>shapez.io</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游戏</tag>
      
      <tag>shapez.io</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
